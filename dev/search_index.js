var documenterSearchIndex = {"docs":
[{"location":"pages/fits/#FITS-structure","page":"FITS structure","title":"FITS structure","text":"","category":"section"},{"location":"pages/fits/#Introduction","page":"FITS structure","title":"Introduction","text":"","category":"section"},{"location":"pages/fits/","page":"FITS structure","title":"FITS structure","text":"The Application Programming Interface (API) for CamiFITS is based on 6  FITS-object structs with dedicated object-casting procedures to enforce the  FITS standard . The API  elements are typically called internally by one of the Basic tools but is made available in the documentation to provide insight in the structure of  CamiFITS.","category":"page"},{"location":"pages/fits/#FITS-objects","page":"FITS structure","title":"FITS-objects","text":"","category":"section"},{"location":"pages/fits/","page":"FITS structure","title":"FITS structure","text":"FITS\nFITS_filnam\nFITS_HDU\nFITS_header\nFITS_card\nFITS_dataobject\nPtrs\nHDU_ptr\nFITS_pointer\nFITS_ptr","category":"page"},{"location":"pages/fits/#CamiFITS.FITS","page":"FITS structure","title":"CamiFITS.FITS","text":"FITS\n\nObject to hold a single .fits file.\n\nThe fields are\n\n.filnam::  the .fits filename (:String)\n.hdu: the collection of header-data-unit objects (::Vector{FITS_HDU}`)\n\n\n\n\n\n","category":"type"},{"location":"pages/fits/#CamiFITS.FITS_filnam","page":"FITS structure","title":"CamiFITS.FITS_filnam","text":"FITS_filnam\n\nmutable FITS object to hold the decomposed name of a .fits file.\n\nThe fields are: \" .value:  for p#.fits this is p#.fits (::String)\n\n.name:  for p#.fits this is p# (::String)\n.prefix:  for p#.fits this is p (::String)\n.numerator:  for p#.fits this is #, a serial number (e.g., '3') or a range (e.g., '3-7') (::String)\n.extension:  for p#.fits this is .fits (::String)\n\n\n\n\n\n","category":"type"},{"location":"pages/fits/#CamiFITS.FITS_HDU","page":"FITS structure","title":"CamiFITS.FITS_HDU","text":"FITS_HDU\n\nObject to hold a single \"Header and Data Unit\" (HDU).\n\nThe fields are\n\n.hduindex::  identifier (a file may contain more than one HDU) (:Int)\n.header:  the header object (::FITS_header)\n.dataobject:  the data object (::FITS_dataobject)\n\nNB. An empty data block (.dataobject = nothing) conforms to the standard.\n\n\n\n\n\n","category":"type"},{"location":"pages/fits/#CamiFITS.FITS_header","page":"FITS structure","title":"CamiFITS.FITS_header","text":"FITS_header\n\nObject to hold the header information of a FITS_HDU.\n\nThe fields are:\n\n.card: the array of cards (::Vector{FITS_card})\n.map:  Dictionary keyword => recordindex (::Dict{String, Int})\n.size: length in bytes (::Int)\n\n\n\n\n\n","category":"type"},{"location":"pages/fits/#CamiFITS.FITS_card","page":"FITS structure","title":"CamiFITS.FITS_card","text":"FITS_card\n\nObject to hold the card information of the FITS_header object.\n\nThe fields are:\n\n.cardindex:  identifier of the header record (::Int)\n.record:  the full record on the card (::String)\n.keyword:  name of the corresponding header record (::String)\n.val:  value  of the corresponding header record (::Any)\n.comment:  comment on the corresponding header record (::String)\n\n\n\n\n\n","category":"type"},{"location":"pages/fits/#CamiFITS.FITS_dataobject","page":"FITS structure","title":"CamiFITS.FITS_dataobject","text":"FITS_dataobject\n\nObject to hold the data of the FITS_HDU of given hdutype.\n\nThe fields are:\n\n.hdutype:  accepted types are 'PRIMARY', 'IMAGE' and 'TABLE' (::String)\n.data:  in the from appropriate for the hdutype (::Any)\n\n\n\n\n\n","category":"type"},{"location":"pages/fits/#CamiFITS.Ptrs","page":"FITS structure","title":"CamiFITS.Ptrs","text":"Ptrs\n\nPointer object holding startandstop`values for reading/writingIOStream`.\n\nThe fields are:\n\n.start:  startofIOStream (::Int)\n.stop:   endofIOStream (::Int)\n\n\n\n\n\n","category":"type"},{"location":"pages/fits/#CamiFITS.HDU_ptr","page":"FITS structure","title":"CamiFITS.HDU_ptr","text":"HDU_ptr\n\nObject holding header and data Ptrs objects.\n\nThe fields are:\n\n.header:  IO pointing object (::Ptrs)\n.data:  IO data object (::Ptrs)\n\n\n\n\n\n","category":"type"},{"location":"pages/fits/#CamiFITS.FITS_pointer","page":"FITS structure","title":"CamiFITS.FITS_pointer","text":"FITS_pointer\n\nObject holding an array of HDU_ptr objects.\n\nThe fields are:\n\n.nblock     : block count (::Int)                 \n.nhdu       : hdu count (::Int)     \n.block_start: start-of-block pointers: (::Tuple(Vector{Int}))  \n.block_stop: end-of-block pointers: (::Tuple(Vector{Int}))  \n.hdu_start: start-of-hdu pointers: (::Tuple(Vector{Int}))  \n.hdu_stop: end-of-hdu pointers: (::Tuple(Vector{Int}))  \n.hdr_start: start-of-header pointers: (::Tuple(Vector{Int}))  \n.hdr_stop: end-of-header pointers: (::Tuple(Vector{Int})))  \n.data_start: start-of-data pointers: (::Tuple(Vector{Int}))  \n.data_stop: end-of-data pointers: (::Tuple(Vector{Int}))  \n\n\n\n\n\n","category":"type"},{"location":"pages/fits/#CamiFITS.FITS_ptr","page":"FITS structure","title":"CamiFITS.FITS_ptr","text":"FITS_ptr\n\nObject holding an array of HDU_ptr objects.\n\nIt has a single field:\n\n.hdu:  IO pointing object (::Vector{HDU_ptr})\n\n\n\n\n\n","category":"type"},{"location":"pages/fits/#FITS-object-casting","page":"FITS structure","title":"FITS-object casting","text":"","category":"section"},{"location":"pages/fits/","page":"FITS structure","title":"FITS structure","text":"The ordering of the FITS-object casting procedures is illustrated in the  flow diagram below. ","category":"page"},{"location":"pages/fits/","page":"FITS structure","title":"FITS structure","text":"(Image: Image)","category":"page"},{"location":"pages/fits/","page":"FITS structure","title":"FITS structure","text":"The use of the casting procedures is recommended over direct application of the FITS-object strucs to ensure conformance to the  FITS standard .","category":"page"},{"location":"pages/fits/","page":"FITS structure","title":"FITS structure","text":"cast_FITS_filnam(filnam::String)\ncast_FITS_dataobject(hdutype::String, data)\ncast_FITS_header(dataobject::FITS_dataobject)\ncast_FITS_card(cardindex::Int, record::String)\ncast_FITS_HDU(hduindex::Int, header::FITS_header, data::FITS_dataobject)\ncast_FITS(filnam::String, hdu::Vector{FITS_HDU})\ncast_FITS_pointer(o::IO)\ncast_FITS_ptr(o::IO; msg=false)","category":"page"},{"location":"pages/fits/#CamiFITS.cast_FITS_filnam-Tuple{String}","page":"FITS structure","title":"CamiFITS.cast_FITS_filnam","text":"cast_FITS_filnam(filnam::String)\n\nCreate the FITS_filnam object to decompose filnam into its name,  prefix, numerator and extension.\n\nExample:\n\njulia> filnam = \"T23.01.fits\";\n\njulia> n = cast_FITS_filnam(filnam);\n\njulia> n.name, n.prefix, n.numerator, n.extension\n(\"T23.01\", \"T23.\", \"01\", \".fits\")\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#CamiFITS.cast_FITS_dataobject-Tuple{String, Any}","page":"FITS structure","title":"CamiFITS.cast_FITS_dataobject","text":"cast_FITS_dataobject(hdutype::String, data)\n\nCreate the FITS_dataobject object for given hduindex constructed from  the data in accordance to the specified hdutype: PRIMARY,  IMAGE, ARRAY, TABLE (ASCII table) or BINTABLE (binary table).\n\nExample:\n\njulia> data = [11,21,31,12,22,23,13,23,33];\n\njulia> data = reshape(data,(3,3));\n\njulia> d = cast_FITS_dataobject(\"image\", data)\nFITS_dataobject(\"'IMAGE   '\", [11 12 13; 21 22 23; 31 23 33])\n\njulia> d.data\n3Ã—3 Matrix{Int64}:\n 11  12  13\n 21  22  23\n 31  23  33\n\njulia> d.hdutype\n\"'IMAGE   '\"\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#CamiFITS.cast_FITS_header-Tuple{FITS_dataobject}","page":"FITS structure","title":"CamiFITS.cast_FITS_header","text":"cast_FITS_header(dataobject::FITS_dataobject)\n\nCreate the FITS_header object from the dataobject. The  dataobject-input mode is used by fits_create to ceate the header object as part of creating the FITS object starting from Julia data  input.\n\nExample:\n\njulia> data = [11 21 31; 12 22 23; 13 23 33];\n\njulia> d = cast_FITS_dataobject(\"image\", data);\n\njulia> h = cast_FITS_header(d);\n\njulia> h.map\nDict{String, Int64} with 7 entries:\n  \"BITPIX\"   => 2\n  \"NAXIS2\"   => 5\n  \"XTENSION\" => 1\n  \"NAXIS1\"   => 4\n  \"\"         => 36\n  \"NAXIS\"    => 3\n  \"END\"      => 6\n\ncast_FITS_header(record::Vector{String})\n\nCreate the FITS_header object from a block of (a multiple of) 36  single-record strings (of 80 printable ASCII characters). The record-input mode is used by fits_read after reading the header records from disk  (see casting diagram above).\n\nExample:\n\njulia> record = [rpad(\"KEYWORD$i\",8) * \"'\" * rpad(\"$i\",70) * \"'\" for i=1:3];\n\njulia> blanks = [repeat(' ', 80) for i = 1:36-length(record)];\n\njulia> append!(record, blanks);         # to conform to the FITS standard\n\njulia> h = cast_FITS_header(record);\n\njulia> h.map\nDict{String, Int64} with 4 entries:\n  \"KEYWORD3\" => 3\n  \"KEYWORD2\" => 2\n  \"KEYWORD1\" => 144\n  \"\"         => 36\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#CamiFITS.cast_FITS_card-Tuple{Int64, String}","page":"FITS structure","title":"CamiFITS.cast_FITS_card","text":"cast_FITS_card(cardindex::Int, record::String)\n\nCreate the FITS_card object for record with index cardindex.\n\nExample:\n\njulia> record = \"SIMPLE  =                    T / file does conform to FITS standard             \";\n\njulia> card = cast_FITS_card(1, record);\n\njulia> card.cardindex, card.keyword, card.value, card.comment\n(1, \"SIMPLE\", true, \"file does conform to FITS standard             \")\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#CamiFITS.cast_FITS_HDU-Tuple{Int64, FITS_header, FITS_dataobject}","page":"FITS structure","title":"CamiFITS.cast_FITS_HDU","text":"cast_FITS_HDU(hduindex::Int, header::FITS_header, data::FITS_dataobject)\n\nCreate the FITS_HDU object for given hduindex, header and data.\n\nExample:\n\njulia> data = [11 21 31; 12 22 23; 13 23 33];\n\njulia> d = cast_FITS_dataobject(\"image\", data);\n\njulia> h = cast_FITS_header(d);\n\njulia> hdu = cast_FITS_HDU(1, h, d);\n\njulia> hdu.dataobject.data\n3Ã—3 Matrix{Int64}:\n 11  21  31\n 12  22  23\n 13  23  33\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#CamiFITS.cast_FITS-Tuple{String, Vector{FITS_HDU}}","page":"FITS structure","title":"CamiFITS.cast_FITS","text":"FITS(filnam::String, hdu::Vector{FITS_HDU})\n\nObject to hold a single .fits file.\n\nThe fields are\n\n.filnam:  filename of the corresponding .fits file (::String)\n.hdu:  array of FITS_HDUs (::Vector{FITS_HDU})\n\nExample:\n\njulia> data = [11 21 31; 12 22 23; 13 23 33];\n\njulia> d = cast_FITS_dataobject(\"image\", data);\n\njulia> h = cast_FITS_header(d);\n\njulia> hdu = cast_FITS_HDU(1, h, d);\n\njulia> f = cast_FITS(\"test.fits\", [hdu]);\n\njulia> f.hdu[1].dataobject.data\n3Ã—3 Matrix{Int64}:\n 11  21  31\n 12  22  23\n 13  23  33\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#CamiFITS.cast_FITS_pointer-Tuple{IO}","page":"FITS structure","title":"CamiFITS.cast_FITS_pointer","text":"cast_FITS_pointer(o::IO)\n\nPrefered method to construct a FITS_pointer object.\n\nExample:\n\njulia> filnam = \"kanweg.fits\";\n\njulia> data = [0x0000043e, 0x0000040c, 0x0000041f];\n\njulia> f = fits_create(filnam, data; protect=false);\n\njulia> fits_extend(f, data; hdutype=\"'IMAGE   '\");\n\njulia> fits_extend(f, data; hdutype=\"'IMAGE   '\");\n\njulia> o = IORead(filnam);\n\njulia> p = cast_FITS_pointer(o);\n\n julia> p.nblock, p.nhdu, p.block_start, p.block_stop, p.hdu_start, p.hdr_stop\n (6, 3, (0, 2880, 5760, 8640, 11520, 14400), (2880, 5760, 8640, 11520, 14400, 17280), (0, 5760, 11520), (2880, 8640, 14400))\n    \n julia> p.hdr_start, p.hdr_stop, p.data_start, p.data_stop\n ((0, 5760, 11520), (2880, 8640, 14400), (2880, 8640, 14400), (8640, 14400, 17280))\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#CamiFITS.cast_FITS_ptr-Tuple{IO}","page":"FITS structure","title":"CamiFITS.cast_FITS_ptr","text":"cast_FITS_ptr(o::IO [; msg=false])\ncast_FITS_ptr(p::FITS_pointer)\n\nPrefered method to construct a FITS_ptr object.\n\nExample:\n\njulia> filnam = \"kanweg.fits\";\njulia> data = [0x0000043e, 0x0000040c, 0x0000041f];\njulia> f = fits_create(filnam, data; protect=false);\njulia> fits_extend(f, data; hdutype=\"'IMAGE   '\");\njulia> fits_extend(f, data; hdutype=\"'IMAGE   '\");\njulia> o = IORead(filnam);\n\njulia> ptr = cast_FITS_ptr(o; msg=true)\n             block count: 6\n               hdu count: 3\n start-of-block pointers: [0, 2880, 5760, 8640, 11520, 14400]\n   end-of-block pointers: [2880, 5760, 8640, 11520, 14400, 17280]\n   start-of-hdu pointers: [0, 5760, 11520]\n     end-of-hdu pointers: [5760, 11520, 17280]\nstart-of-header pointers: [0, 5760, 11520]\n  end-of-header pointers: [2880, 8640, 14400]\n  start-of-data pointers: [2880, 8640, 14400]\n    end-of-data pointers: [8640, 14400, 17280]\n\nFITS_ptr(HDU_ptr[HDU_ptr(Ptrs(0, 2880), Ptrs(2880, 8640)), HDU_ptr(Ptrs(5760, 8640), Ptrs(8640, 14400)), HDU_ptr(Ptrs(11520, 14400), Ptrs(14400, 17280))])\n\njulia> p.hdu[2].header.start, p.hdu[2].data.start\n(5760, 8640)\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#FITS-methods","page":"FITS structure","title":"FITS methods","text":"","category":"section"},{"location":"pages/fits/","page":"FITS structure","title":"FITS structure","text":"fits_pointer(filnam::String)\nfits_pointers(filnam::String)\nfits_zero_offset(T::Type)\nfits_apply_zero_offset(data)\nfits_remove_zero_offset(data)\nfits_parse_table(hdu::FITS_HDU; byrow=true)","category":"page"},{"location":"pages/fits/#CamiFITS.fits_pointer-Tuple{String}","page":"FITS structure","title":"CamiFITS.fits_pointer","text":"fits_pointer(filnam::String)\nfits_pointer(f::FITS)\n\nFITS_pointer object used by CamiFITS\n\nExamples:\n\njulia> filnam = \"kanweg.fits\";\n\njulia> f = fits_create(filnam, data; protect=false);\n\njulia> fits_extend(f; hdutype=\"'IMAGE   '\");\n\njulia> fits_extend(filnam, data; hdutype=\"'IMAGE   '\");\n\njulia> p = fits_pointer(f);\n\njulia> p.nblock\n5\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#CamiFITS.fits_pointers-Tuple{String}","page":"FITS structure","title":"CamiFITS.fits_pointers","text":"fits_pointers(filnam::String)\nfits_pointers(f::FITS)\n\nsummay of the pointers used by CamiFITS\n\nExamples:\n\njulia> filnam = \"kanweg.fits\";\n\njulia> data = [0x0000043e, 0x0000040c, 0x0000041f];\n\njulia> f = fits_create(filnam, data; protect=false);\n\njulia> fits_extend(f);\n\njulia> fits_extend(filnam, data; hdutype=\"'IMAGE   '\");\n\njulia> foreach(println, fits_pointers(filnam))\n             block count: 5\n               hdu count: 3\n start-of-block pointers: (0, 2880, 5760, 8640, 11520)\n   end-of-block pointers: (2880, 5760, 8640, 11520, 14400)\n   start-of-hdu pointers: (0, 5760, 8640)\n     end-of-hdu pointers: (2880, 8640, 11520)\nstart-of-header pointers: (0, 5760, 8640)\n  end-of-header pointers: (2880, 8640, 11520)\n  start-of-data pointers: (2880, 8640, 11520)\n    end-of-data pointers: (5760, 8640, 14400)\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#CamiFITS.fits_zero_offset-Tuple{Type}","page":"FITS structure","title":"CamiFITS.fits_zero_offset","text":"fits_zero_offset(T::Type)\n\nZero offset a as used in linear scaling equation\n\nf(x) = a + b x,\n\nwhere b is the scaling factor. \n\nThe default value is a = 0.0 for Real numeric types.  For non-real types a = nothing.\n\nExample:\n\njulia> T = Type[Any, Bool, Int8, UInt8, Int16, UInt16, Int32, UInt32,\n                  Int64, UInt64, Float16, Float32, Float64];\n\njulia> o = (0.0, 0.0, -128, 0.0, 0.0, 32768,\n                   0.0, 2147483648, 0.0, 9223372036854775808, 0.0, 0.0, 0.0);\n\njulia> sum([fits_zero_offset(T[i]) == o[i] for i âˆˆ eachindex(T)]) == 13\ntrue\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#CamiFITS.fits_apply_zero_offset-Tuple{Any}","page":"FITS structure","title":"CamiFITS.fits_apply_zero_offset","text":"fits_apply_zero_offset(data)\n\nShift the UInt range of values onto the Int range by substracting from  the data the appropriate integer offset value as specified by the BZERO  keyword.\n\nNB. Since the FITS format does not support a native unsigned integer data  type (except UInt8), unsigned values of the types UInt16, UInt32 and  UInt64, are stored as native signed integers of the types Int16, Int32  and Int64, respectively, after substracting the appropriate integer offset  specified by the (positive) BZERO keyword value. For the byte data type  (UInt8), the converse technique can be used to store signed byte values  (Int8) as native unsigned values (UInt) after subtracting the (negative)  BZERO offset value. \n\nThis method is included and used in storing of data to ensure backward  compatibility with software not supporting native values of the types Int8,  UInt16, UInt32 and UInt64.\n\nExample:\n\njulia> fits_apply_zero_offset(UInt32[0])\n1-element Vector{Int32}:\n -2147483648\n\njulia> fits_apply_zero_offset(Int8[0])\n1-element Vector{UInt8}:\n 0x80\n\njulia> Int(0x80)\n128\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#CamiFITS.fits_remove_zero_offset-Tuple{Any}","page":"FITS structure","title":"CamiFITS.fits_remove_zero_offset","text":"fits_remove_zero_offset(data)\n\nShift the Int range of values onto the UInt range by adding to the data the appropriate integer offset value as specified by the BZERO keyword.\n\nNB. Since the FITS format does not support a native unsigned integer data  type (except UInt8), unsigned values of the types UInt16, UInt32 and  UInt64, are recovered from stored native signed integers of the types Int16, Int32 and Int64, respectively, by adding the appropriate integer offset  specified by the (positive) BZERO keyword value. For the byte data type  (UInt8), the converse technique can be used to recover the signed byte values (Int8) from the stored native unsigned values (UInt) by adding the  (negative) BZERO offset value. \n\nThis method is included and used in reading stored data to ensure backward  compatibility with software not supporting native values of the types  Int8, UInt16, UInt32 and UInt64.\n\nExample:\n\njulia> fits_remove_zero_offset(Int32[-2147483648])\n1-element Vector{UInt32}:\n 0x00000000\n\njulia> Int(0x00000000)\n0\n\njulia> fits_remove_zero_offset(UInt8[128])\n1-element Vector{Int8}:\n 0\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#CamiFITS.fits_parse_table-Tuple{FITS_HDU}","page":"FITS structure","title":"CamiFITS.fits_parse_table","text":"fits_parse_table(hdu::FITS_HDU; byrow=true)\n\nabcd\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#Fortran-objects","page":"FITS structure","title":"Fortran objects","text":"","category":"section"},{"location":"pages/fits/","page":"FITS structure","title":"FITS structure","text":"FORTRAN_format","category":"page"},{"location":"pages/fits/#CamiFITS.FORTRAN_format","page":"FITS structure","title":"CamiFITS.FORTRAN_format","text":"FORTRAN_format\n\nObject to hold a FORTRAN format specifier decomposed in its fields.\n\nAccepted datatype specifiers are:  Aw,  Iw,  Fw.d,  Ew.d,  Dw.d\n\nAccepted output formating specifiers are: Aw,  Iw.m,  Bw.m,  Ow.m, Zw.m,  Fw.d,  Ew.dEe,  ENw.d,  ESw.d,  Gw.dEe,  Dw.dEe. Notation: w - width, m (optional) - minimum number of digits, d - number of digits to right of decimal, e - number of digits in exponent N/S (optional) indicates engineering/scientific formating of the E type.\n\nThe fields are:\n\n.datatype: primary FORTRAN datatype (::String)\n.char: primary FORTRAN datatype character (::Char)\n.EngSci: secundary datatype character - N for engineering/ S for scientific (::Union{Char,Nothing})\n.width: width of numeric field (::Int)\n.nmin: minimum number of digits displayed (::Int)\n.ndec: number of digits to right of decimal (::Int)\n.nexp: number of digits in exponent (::Int)\n\n\n\n\n\n","category":"type"},{"location":"pages/fits/#Fortran-object-casting","page":"FITS structure","title":"Fortran-object casting","text":"","category":"section"},{"location":"pages/fits/","page":"FITS structure","title":"FITS structure","text":"cast_FORTRAN_format(str::String)","category":"page"},{"location":"pages/fits/#CamiFITS.cast_FORTRAN_format-Tuple{String}","page":"FITS structure","title":"CamiFITS.cast_FORTRAN_format","text":"cast_FORTRAN_format(format::String)\n\nDecompose the format specifier format into its fields and cast this into the FORTRAN_format object. Allowed format specifiers are of the types: Aw, Iw.m, Bw.m, Ow.m, Zw.m, Fw.d, Ew.dEe, ENw.d, ESw.d, Gw.dEe, Dw.dEe, with: w - width, m(optional) - minimum number of digits, d - number of digits to right of decimal, e - number of digits in exponent; N/S (optional) indicates engineering/scientific formating of the E type.\n\nExamples:\n\njulia> cast_FORTRAN_format(\"I10\")\nFORTRAN_format(\"Iw\", 'I', nothing, 10, 0, 0, 0)\n\njulia> cast_FORTRAN_format(\"I10.12\")\nFORTRAN_format(\"Iw.m\", 'I', nothing, 10, 12, 0, 0)\n\njulia> F = cast_FORTRAN_format(\"E10.5E3\")\nFORTRAN_format(\"Ew.dEe\", 'E', nothing, 10, 0, 5, 3)\n\njulia> F.Type, F.TypeChar, F.EngSci, F.width, F.nmin, F.ndec, F.nexp\n(\"Ew.dEe\", 'E', nothing, 10, 0, 5, 3)  \n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#FORTRAN-related-methods","page":"FITS structure","title":"FORTRAN-related methods","text":"","category":"section"},{"location":"pages/fits/","page":"FITS structure","title":"FITS structure","text":"FORTRAN_eltype_char(T::Type)","category":"page"},{"location":"pages/fits/#CamiFITS.FORTRAN_eltype_char-Tuple{Type}","page":"FITS structure","title":"CamiFITS.FORTRAN_eltype_char","text":"FORTRAN_eltype_char(T::Type)\n\nFORTRAN datatype description character for julia type T: \n\nBool => 'L', UInt8 => 'B', Int16 => 'I', UInt16 => 'I', Int32 => 'J',  UInt32 => 'J', Int64 => 'K', UInt64 => 'K', Float32 => 'E', Float64 => 'D',  ComplexF32 => 'C', ComplexF64 => 'M'\n\nThe character '-' is returned for non-primitive FORTRAN datatypes and for  primitive datatypes not included in the FITS standard.\n\nExamples:\n\njulia> T = Type[Bool, Int8, UInt8, Int16, UInt16, Int32, UInt32, Int64, UInt64];\n\njulia> print([FORTRAN_eltype_char(T[i]) for i âˆˆ eachindex(T)])\nInt8: datatype not part of the FITS standard\n['L', '-', 'B', 'I', 'I', 'J', 'J', 'K', 'K']\n\njulia> T = [Float16, Float32, Float64, ComplexF32, ComplexF64];\n\njulia> print([FORTRAN_eltype_char(T[i]) for i âˆˆ eachindex(T)])\nFloat16: datatype not part of the FITS standard\n['-', 'E', 'D', 'C', 'M']\n\njulia> T = [String, Vector{Char}, FITS];\n\njulia> print([FORTRAN_eltype_char(T[i]) for i âˆˆ eachindex(T)])\nVector{Char}: not a FORTRAN datatype\nFITS: not a FORTRAN datatype\n['A', 'A', '-', '-']\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#Plotting","page":"FITS structure","title":"Plotting","text":"","category":"section"},{"location":"pages/fits/","page":"FITS structure","title":"FITS structure","text":"step125(x::Real)\nselect125(x)\nsteps(x::Vector{T} where T<:Real)\nstepcenters(x::Vector{T} where T<:Real)\nstepedges(x::Vector{T} where T<:Real)\nedges(px, Î”x=1.0, x0=0.0)","category":"page"},{"location":"pages/fits/#CamiFITS.step125-Tuple{Real}","page":"FITS structure","title":"CamiFITS.step125","text":"step125(x)\n\nStep used for deviding the number x in steps according to 1-2-5 scheme\n\nExamples:\n\nstep125.([5,10,21.3,50,100.1])\n5-element Vector{Int64}:\n  1\n  2\n  5\n 10\n 20\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#CamiFITS.select125-Tuple{Any}","page":"FITS structure","title":"CamiFITS.select125","text":"select125(x)\n\nSelect elements of the collection x by index according to 1-2-5 scheme\n\nExamples:\n\nx = [1,2,4,6,8,10,13,16,18,20,40,60,80,100]\nselect125(x)\n [2, 6, 10, 16, 20, 60, 100]\n\nx = string.(x)\nselect125(x)\n [\"2\", \"6\", \"10\", \"16\", \"20\", \"60\", \"100\"]\n\nx = 1:100\nselect125(x)\n [20, 40, 60, 80, 100]\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#CamiFITS.steps-Tuple{Vector{T} where T<:Real}","page":"FITS structure","title":"CamiFITS.steps","text":"steps(x)\n\nHeatmap range transformation for steplength specification vector x\n\nExamples:\n\nx = [4,2,6]\nsteps(x)\n [0, 4, 6, 12]\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#CamiFITS.stepcenters-Tuple{Vector{T} where T<:Real}","page":"FITS structure","title":"CamiFITS.stepcenters","text":"stepcenters(x)\n\nStepcenter positions for steplength specification vector x\n\nExamples:\n\nx = [4,2,6]\nstepcenters(x)\n [2.0, 5.0, 9.0]\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#CamiFITS.stepedges-Tuple{Vector{T} where T<:Real}","page":"FITS structure","title":"CamiFITS.stepedges","text":"stepedges(x)\n\nStepedges for steplength specification vector x\n\nExamples:\n\nx = [4,2,6]\nstepedges(x)\n [0, 4, 6, 12]\n\n\n\n\n\n","category":"method"},{"location":"pages/fits/#CamiFITS.edges","page":"FITS structure","title":"CamiFITS.edges","text":"edges(px [, Î”x[, x0]])\n\nHeatmap range transformation from pixel coordinates to physical coordinates, with pixelsize Î”x and offset x0, both in physical units.\n\nExamples:\n\npx = 1:5\nÎ”x = 2.5\nx0 = 2.5\nedges(px)\n [0.5, 1.5, 2.5, 3.5, 4.5]\n\nedges(px, Î”x)\n [1.25, 3.75, 6.25, 8.75, 11.25]\n\nedges(px, Î”x, x0)\n [-1.25, 1.25, 3.75, 6.25, 8.75]\n\n\n\n\n\n","category":"function"},{"location":"pages/tools/#FITS-Tools","page":"Basic tools","title":"FITS Tools","text":"","category":"section"},{"location":"pages/tools/#FITS-metainformation","page":"Basic tools","title":"FITS metainformation","text":"","category":"section"},{"location":"pages/tools/","page":"Basic tools","title":"Basic tools","text":"fits_info(hdu::FITS_HDU; nr=true, hdr=true)\nfits_record_dump(filnam::String, hduindex=0; hdr=true, dat=true, nr=true, msg=true)","category":"page"},{"location":"pages/tools/#CamiFITS.fits_info-Tuple{FITS_HDU}","page":"Basic tools","title":"CamiFITS.fits_info","text":"fits_info(f::FITS [, hduindex=1 [; nr=false [, hdr=true]]])\nfits_info(hdu::FITS_HDU; nr=false, hdr=true)\n\nMetafinformation and data of a given FITS_HDU object with optional record numbering. \n\nhduindex: HDU index (::Int - default: 1 = primary hdu)\nnr: include cardindex (::Bool - default: false)\nhdr: show header (::Bool)\n\nExample:\n\nTo demonstrate fits_info we first create the fits object f for subsequent  inspection.\n\njulia> filnam = \"minimal.fits\";\n\njulia> f = fits_create(filnam; protect=false);\n\njulia> fits_info(f)\n\nFile: minimal.fits\nhdu: 1\nhdutype: 'PRIMARY '\nDataType: Any\nDatasize: (0,)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    1 / number of data axes\nNAXIS1  =                    0 / length of data axis 1\nEXTEND  =                    T / FITS dataset may contain extensions\nEND\n\nAny[]\n\njulia> rm(filnam); f = nothing\n\nfits_info(filnam::String [, hduindex=1 [; nr=true [, hdr=true]]])\n\nSame as above but creating the fits object by reading filnam from disc and with default record numbering.\n\nhduindex: HDU index (::Int - default: 1 = primary hdu)\nnr: include cardindex (::Bool - default: true)\nhdr: show header (::Bool)\n\nExample:\n\njulia> filnam = \"minimal.fits\";\n\njulia> fits_create(filnam; protect=false);\n\njulia> fits_info(filnam)\n\nFile: minimal.fits\nhdu: 1\nhdutype: 'PRIMARY '\nDataType: Any\nDatasize: (0,)\n\n  nr | Metainformation:\n---------------------------------------------------------------------------------------\n   1 | SIMPLE  =                    T / file does conform to FITS standard\n   2 | BITPIX  =                   64 / number of bits per data pixel\n   3 | NAXIS   =                    1 / number of data axes\n   4 | NAXIS1  =                    0 / length of data axis 1\n   5 | EXTEND  =                    T / FITS dataset may contain extensions\n   6 | END\n\nAny[]\n\njulia> rm(filnam)\n\n\n\n\n\n","category":"method"},{"location":"pages/tools/#CamiFITS.fits_record_dump","page":"Basic tools","title":"CamiFITS.fits_record_dump","text":"fits_record_dump(filnam [, hduindex=0 [; hdr=true [, dat=true [, nr=true [, msg=true]]]])\n\nThe file filnam as a Vector{String} of 80 character records without any further formatting. \n\nFor msg=trueit outputs a listing offilnam` in blocks (2880 bytes) of 36 (optionally  indexed) records. The dump proceeds without casting of FITS objects; i.e., without  FITS-conformance testing.\n\ndefault: hduindex = 0 - all blocks          hduindex > 0 - only blocks of given hduindex\n\nhduindex: HDU index (::Int - default: 0 all records)\nhdr: show header (::Bool - default: true)\ndat: show data (::Bool - default: true)\nnr: include record index (row number) (::Bool - default: true)\nmsg: print message (::Bool)\n\nExample:\n\njulia> filnam = \"test.fits\";\n\njulia> data = [typemin(UInt32),typemax(UInt32)];\n\njulia> fits_create(filnam, data; protect=false);\n\njulia> dump = fits_record_dump(filnam; msg=false);\n\njulia> foreach(println,dump[3:8])\n   3 | NAXIS   =                    1 / number of data axes\n   4 | NAXIS1  =                    2 / length of data axis 1\n   5 | BSCALE  =                  1.0 / default scaling factor\n   6 | BZERO   =           2147483648 / offset data range to that of unsigned integer\n   7 | EXTEND  =                    T / FITS dataset may contain extensions\n   8 | END\n\njulia> dump[37]\n\"  37 | UInt8[0x80, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, â‹¯, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]\"]\"\n\njulia> rm(filnam); f = data = dump = nothing\n\n\n\n\n\n","category":"function"},{"location":"pages/tools/#FITS-creation,-extension-and-collection","page":"Basic tools","title":"FITS creation, extension and collection","text":"","category":"section"},{"location":"pages/tools/","page":"Basic tools","title":"Basic tools","text":"fits_create(filnam::String, data=Int[]; protect=true, msg=false)\nfits_extend(f::FITS, data; hdutype=\"IMAGE\", msg=false)\nfits_collect(filnamFirst::String, filnamLast::String; protect=true)","category":"page"},{"location":"pages/tools/#CamiFITS.fits_create","page":"Basic tools","title":"CamiFITS.fits_create","text":"fits_create(filnam [, data [; protect=true]])\n\nCreate and fits_save a .fits file of given filnam and return Array of HDUs. Key:\n\ndata: data primary hdu (::DataType)\nprotect: overwrite protection (::Bool)\n\nNB. For the details of the save procedure (not shown in the flow diagram) see fits_save.\n\n(Image: Image)\n\nExamples:\n\njulia> filnam = \"test.fits\";\n\njulia> f = fits_create(filnam, data; protect=false);\n\njulia> fits_info(f)\n\nFile: test.fits\nhdu: 1\nhdutype: 'PRIMARY '\nDataType: Int64\nDatasize: (3, 3)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    2 / number of data axes\nNAXIS1  =                    3 / length of data axis 1\nNAXIS2  =                    3 / length of data axis 2\nEXTEND  =                    T / FITS dataset may contain extensions\nEND\n\n3Ã—3 Matrix{Int64}:\n 11  21  31\n 12  22  23\n 13  23  33\n\njulia> rm(\"minimal.fits\"); f = nothing\n\n\n\n\n\n","category":"function"},{"location":"pages/tools/#CamiFITS.fits_extend-Tuple{FITS, Any}","page":"Basic tools","title":"CamiFITS.fits_extend","text":"fits_extend(f::FITS, data [; hdutype=\"IMAGE\"])\nfits_extend(filnam::String, data [; hdutype=\"IMAGE\"])\n\nHDU array in which the FITS object f or FITS file filnam is extended  with the data in the format of the specified hdutype. \n\nNB. For the details of the save procedure (not shown in the flow diagram) see fits_save.\n\n(Image: Image)\n\nExamples:\n\njulia> filnam = \"example.fits\";\n\njulia> fits_create(filnam; protect=false);\n\njulia> table = let\n        [true, 0x6c, 1081, 0x0439, 1.23, 1.01f-6, 1.01e-6, 'a', \"a\", \"abc\"],\n        [false, 0x6d, 1011, 0x03f3, 23.2, 3.01f-6, 3.01e-6, 'b', \"b\", \"abcdef\"]\n        end;\n\njulia> fits_extend(filnam, table; hdutype=\"table\");\n\njulia> fits_info(filnam, 2; hdr=false)\n2-element Vector{String}:\n \" 1 108 1081 1081  1.23 1.01E-6 1.01D-6 a a    abc\"\n \" 0 109 1011 1011 23.20 3.01E-6 3.01D-6 b b abcdef\"\n\njulia> rm(filnam)\n\n\n\n\n\n","category":"method"},{"location":"pages/tools/#CamiFITS.fits_collect-Tuple{String, String}","page":"Basic tools","title":"CamiFITS.fits_collect","text":"fits_collect(fileStart::String, fileStop::String [; protect=true [, msg=true]])\n\nCombine \"fileStart\" with \"fileStop\" (with mandatory \".fits\" extension)\n\nKey:\n\nprotect::Bool: overwrite protection\nmsg::Bool: allow status message\n\nExample:\n\njulia> for i=1:5\n           data = [0 0 0; 0 i 0; 0 0 0]\n           fits_create(\"T$i.fits\", data; protect=false)\n       end\n\njulia> f = fits_collect(\"T1.fits\", \"T5.fits\"; protect=false);\n'T1-T5.fits': file created\n\njulia> fits_info(f)[:,:,2]\n\nFile: T1-T5.fits\nhdu: 1\nhdutype: 'PRIMARY '\nDataType: Int64\nDatasize: (3, 3, 5)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    3 / number of data axes\nNAXIS1  =                    3 / length of data axis 1\nNAXIS2  =                    3 / length of data axis 2\nNAXIS3  =                    5 / length of data axis 3\nEXTEND  =                    T / FITS dataset may contain extensions\nEND\n\n3Ã—3 Matrix{Int64}:\n 0  0  0\n 0  2  0\n 0  0  0\n\njulia> for i = 1:5 rm(\"T$i.fits\") end\n\njulia> rm(\"T1-T5.fits\"); f = nothing\n\n\n\n\n\n","category":"method"},{"location":"pages/tools/#FITS-reading,-copying-and-saving","page":"Basic tools","title":"FITS reading, copying and saving","text":"","category":"section"},{"location":"pages/tools/","page":"Basic tools","title":"Basic tools","text":"fits_read(filnam::String; msg=false)\nfits_save(f::FITS; protect=true)\nfits_save_as(f::FITS, filnam::String; protect=true)\nfits_copy(fileStart::String, fileStop::String=\" \"; protect=true)","category":"page"},{"location":"pages/tools/#CamiFITS.fits_read-Tuple{String}","page":"Basic tools","title":"CamiFITS.fits_read","text":"fits_read(filnam::String)\n\nRead .fits file and return Array of FITS_HDUs\n\n(Image: Image)\n\nExample:\n\njulia> filnam = \"minimal.fits\";\n\njulia> fits_create(filnam; protect=false);\n\njulia> f = fits_read(filnam);\n\njulia> fits_info(f)\nhdu: 1\nhdutype: PRIMARY\nDataType: Any\nDatasize: (0,)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    1 / number of data axes\nNAXIS1  =                    0 / length of data axis 1\nBZERO   =                  0.0 / offset data range to that of unsigned integer\nBSCALE  =                  1.0 / default scaling factor\nEXTEND  =                    T / FITS dataset may contain extensions\nEND\n\nAny[]\n\njulia> rm(filnam); f = nothing\n\n\n\n\n\n","category":"method"},{"location":"pages/tools/#CamiFITS.fits_save-Tuple{FITS}","page":"Basic tools","title":"CamiFITS.fits_save","text":"fits_save(f::FITS [; protect=true])\n\nWrite the FITS object to disc. This routine is called by fits_create  and fits_extend\n\n(Image: Image)\n\n\n\n\n\n","category":"method"},{"location":"pages/tools/#CamiFITS.fits_save_as-Tuple{FITS, String}","page":"Basic tools","title":"CamiFITS.fits_save_as","text":"fits_save_as(f::FITS, filnam::String [; protect=true])\n\nSave the FITS object under the name filnam. Key:\n\nprotect::Bool: overwrite protection\n\njulia> f = fits_create(\"minimal.fits\"; protect=false);\n\njulia> fits_save_as(f, \"kanweg.fits\"; protect=false);\n\njulia> f = fits_read(\"kanweg.fits\");\n\njulia> fits_info(f)\nFile: kanweg.fits\nhdu: 1\nhdutype: PRIMARY\nDataType: Any\nDatasize: (0,)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    1 / number of data axes\nNAXIS1  =                    0 / length of data axis 1\nBZERO   =                  0.0 / offset data range to that of unsigned integer\nBSCALE  =                  1.0 / default scaling factor\nEXTEND  =                    T / FITS dataset may contain extensions\nCOMMENT    Extended FITS HDU   / http://fits.gsfc.nasa.gov/\nEND\n\nAny[]\n\n\n\n\n\n","category":"method"},{"location":"pages/tools/#CamiFITS.fits_copy","page":"Basic tools","title":"CamiFITS.fits_copy","text":"fits_copy(filnam1 [, filnam2=\"\" [; protect=true]])\n\nCopy filnam1 to filnam2 (with mandatory .fits extension) Key:\n\nprotect::Bool: overwrite protection\nmsg::Bool: allow status message\n\nExamples:\n\njulia> fits_create(\"test1.fits\"; protect=false);\n\njulia> fits_copy(\"test1.fits\", \"test2.fits\"; protect=false);\n'test1.fits' was copied under the name 'test2.fits'\n\njulia> rm.([\"test1.fits\", \"test2.fits\"]);\n\n\n\n\n\n","category":"function"},{"location":"pages/tools/#FITS-keyword-tools","page":"Basic tools","title":"FITS keyword tools","text":"","category":"section"},{"location":"pages/tools/","page":"Basic tools","title":"Basic tools","text":"fits_add_key!(f::FITS, hduindex::Int, key::String, val::Any, com::String)\nfits_delete_key!(f::FITS, hduindex::Int, key::String)\nfits_edit_key!(f::FITS, hduindex::Int, key::String, val::Real, com::String)\nfits_rename_key!(f::FITS, hduindex::Int, keyold::String, keynew::String)","category":"page"},{"location":"pages/tools/#CamiFITS.fits_add_key!-Tuple{FITS, Int64, String, Any, String}","page":"Basic tools","title":"CamiFITS.fits_add_key!","text":"fits_add_key!(f::FITS, hduindex::Int, key::String, val::Any, com::String)\n\nAdd a header record of given 'key, value and comment' to 'HDU[hduindex]' of file with name 'filnam'\n\nExample:\n\njulia> filnam = \"minimal.fits\";\n\njulia> f = fits_create(filnam; protect=false);\n\njulia> fits_add_key!(f, 1, \"KEYNEW1\", true, \"This is the new key\");\n\njulia> fits_info(f)\n\nFile: minimal.fits\nhdu: 1\nhdutype: 'PRIMARY '\nDataType: Any\nDatasize: (0,)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    1 / number of data axes\nNAXIS1  =                    0 / length of data axis 1\nEXTEND  =                    T / FITS dataset may contain extensions\nKEYNEW1 =                    T / This is the new key\nEND\n\nAny[]\n\n\n\n\n\n","category":"method"},{"location":"pages/tools/#CamiFITS.fits_delete_key!-Tuple{FITS, Int64, String}","page":"Basic tools","title":"CamiFITS.fits_delete_key!","text":"fits_delete_key!(f::FITS, hduindex::Int, key::String)\n\nDelete a header record of given key, value and comment from the  FITS_HDU f of given hduindex.\n\nExamples:\n\njulia> filnam = \"minimal.fits\";\n\njulia> f = fits_create(filnam; protect=false);\n\njulia> fits_add_key!(f, 1, \"KEYNEW1\", true, \"This is the new key\");\n\njulia> cardindex = get(f.hdu[1].header.map,\"KEYNEW1\", nothing)\n8\n\njulia> keyword = f.hdu[1].header.card[cardindex].keyword\n\"KEYNEW1\"\n\njulia> cardindex = get(f.hdu[1].header.map,\"KEYNEW1\", nothing)\n8\n\njulia> fits_delete_key!(f, 1, \"KEYNEW1\");\n\njulia> cardindex = get(f.hdu[1].header.map,\"KEYNEW1\", nothing)\n\njulia> fits_delete_key!(f, 1, \"NAXIS\");\nERROR: FITSError: 17 - illegal keyword deletion (mandatory keyword)\nStacktrace:\n [1] fits_delete_key!(f::FITS, hduindex::Int64, key::String)\n   @ CamiFITS c:\\Users\\walra\\.julia\\dev\\CamiFITS.jl\\src\\fits_public_sector.jl:495\n [2] top-level scope\n   @ REPL[24]:1\n\n\n\n\n\n","category":"method"},{"location":"pages/tools/#CamiFITS.fits_edit_key!-Tuple{FITS, Int64, String, Real, String}","page":"Basic tools","title":"CamiFITS.fits_edit_key!","text":"fits_edit_key!(f::FITS, hduindex::Int, key::String, val::Any, com::String)\n\nEdit a header record of given 'key, value and comment' to 'HDU[hduindex]' of file with name 'filnam'\n\nExample:\n\njulia> using Dates\n\njulia> data = DateTime(\"2020-01-01T00:00:00.000\");\n\njulia> strExample=\"minimal.fits\";\n\njulia> f = fits_create(strExample; protect=false);\n\njulia> fits_add_key!(f, 1, \"KEYNEW1\", true, \"this is record 5\");\n\njulia> fits_edit_key!(f, 1, \"KEYNEW1\", data, \"record 5 changed to a DateTime type\");\n\njulia> fits_info(f.hdu[1])\nhdu: 1\nhdutype: 'PRIMARY '\nDataType: Any\nDatasize: (0,)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    1 / number of data axes\nNAXIS1  =                    0 / length of data axis 1\nEXTEND  =                    T / FITS dataset may contain extensions\nKEYNEW1 = '2020-01-01T00:00:0' / record 5 changed to a DateTime type\nEND\n\nAny[]\n\n\n\n\n\n","category":"method"},{"location":"pages/tools/#CamiFITS.fits_rename_key!-Tuple{FITS, Int64, String, String}","page":"Basic tools","title":"CamiFITS.fits_rename_key!","text":"fits_rename_key!(filnam::String, hduindex::Int, keyold::String, keynew::String)\n\nRename the key of a header record of file with name 'filnam'\n\nExample:\n\njulia> filnam=\"minimal.fits\";\n\njulia> f = fits_create(filnam; protect=false);\n\njulia> fits_add_key!(f, 1, \"KEYNEW1\", true, \"this is a new record\");\n\njulia> fits_rename_key!(f, 1, \"KEYNEW1\",  \"KEYNEW2\");\n\njulia> fits_info(f.hdu[1])\nhdu: 1\nhdutype: 'PRIMARY '\nDataType: Any\nDatasize: (0,)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    1 / number of data axes\nNAXIS1  =                    0 / length of data axis 1\nBZERO   =                  0.0 / offset data range to that of unsigned integer\nBSCALE  =                  1.0 / default scaling factor\nEXTEND  =                    T / FITS dataset may contain extensions\nCOMMENT    Extended FITS HDU   / http://fits.gsfc.nasa.gov/\nKEYNEW2 =                    T / this is a new record\nEND\n\nAny[]\n\n\n\n\n\n","category":"method"},{"location":"pages/tools/#FITS-keyword-description-tool","page":"Basic tools","title":"FITS keyword description tool","text":"","category":"section"},{"location":"pages/tools/","page":"Basic tools","title":"Basic tools","text":"In the CamiFITS package the mandatory FITS keywords are autogenerated.  To support easy user access to the definition of all reserved FITS keywords  (mandatory or non-mandatory) CamiFITS includes the fits_keyword  tool. ","category":"page"},{"location":"pages/tools/","page":"Basic tools","title":"Basic tools","text":"The description of the FITS keywords is provided by fits_keyword:","category":"page"},{"location":"pages/tools/","page":"Basic tools","title":"Basic tools","text":"julia> fits_keyword(\"bitpix\")\nKEYWORD:    BITPIX\nREFERENCE:  FITS Standard - version 4.0 - Appendix C\nCLASS:      general\nSTATUS:     mandatory\nHDU:        primary, groups, extension, array, image, ASCII-table, bintable,\nVALUE:      integer\nRANGE:      -64,-32,8,16,32,64\nCOMMENT:    bits per data value\nDEFINITION: The value field shall contain an integer.  The absolute value is\nused in computing the sizes of data structures. It shall specify the number of\nbits that represent a data value (using a minus sign for floating point data).","category":"page"},{"location":"pages/tools/","page":"Basic tools","title":"Basic tools","text":"Without argument fits_keyword provides the list of all  FITS defined keywords (for the HDU types inplemented).","category":"page"},{"location":"pages/tools/","page":"Basic tools","title":"Basic tools","text":"julia> fits_keyword()\nFITS defined keywords:\n(blanks) AUTHOR   BITPIX   BLANK    BLOCKED  BSCALE   BUNIT    BZERO            \nCDELTn   COMMENT  CROTAn   CRPIXn   CRVALn   CTYPEn   DATAMAX  DATAMIN          \nDATE     DATE-OBS END      EPOCH    EQUINOX  EXTEND   EXTLEVEL EXTNAME          \nEXTVER   GCOUNT   GROUPS   HISTORY  INSTRUME NAXIS    NAXISn   OBJECT           \nOBSERVER ORIGIN   PCOUNT   PSCALn   PTYPEn   PZEROn   REFERENC SIMPLE           \nTBCOLn   TDIMn    TDISPn   TELESCOP TFIELDS  TFORMn   THEAP    TNULLn           \nTSCALn   TTYPEn   TUNITn   TZEROn   XTENSION \n\nHDU options: 'primary', 'extension', 'array', 'image', 'ASCII-table', 'bintable'\n\nreference: FITS Standard - version 4.0 - Appendix C","category":"page"},{"location":"pages/tools/","page":"Basic tools","title":"Basic tools","text":"Specifying the FITS HDU type in fits_keyword the user obtains the  restricted set of HDU-specific keywords.","category":"page"},{"location":"pages/tools/","page":"Basic tools","title":"Basic tools","text":"julia> fits_keyword(hdutype=\"'PRIMARY '\")\nFITS defined keywords:\nHDU type: 'primary'\n- general\n  - mandatory: BITPIX   END      NAXIS    NAXISn   SIMPLE\n  - reserved : BLANK    BSCALE   BUNIT    BZERO    CDELTn   CROTAn   CRPIXn   \n               CRVALn   CTYPEn   DATAMAX  DATAMIN  EXTEND\n- bibliographic\n  - mandatory:\n  - reserved : AUTHOR   REFERENC\n- commentary\n  - mandatory:\n  - reserved : (blanks) COMMENT  HISTORY\n- observation\n  - mandatory:\n  - reserved : DATE-OBS EPOCH    EQUINOX  INSTRUME OBJECT   OBSERVER TELESCOP\n\nHDU options: 'primary', 'extension', 'array', 'image', 'ASCII-table', 'bintable'\n\nreference: FITS Standard - version 4.0 - Appendix C","category":"page"},{"location":"pages/tools/","page":"Basic tools","title":"Basic tools","text":"By using the keyword \"ALL\" the user can dump the full list of keyword  descriptions:","category":"page"},{"location":"pages/tools/","page":"Basic tools","title":"Basic tools","text":"julia> fits_keyword(\"all\")\nFITS defined keywords:\n\nKEYWORD:    (blank)\nREFERENCE:  FITS Standard - version 4.0 - Appendix C\nCLASS:      commentary\nSTATUS:     reserved\nHDU:        primary, groups, extension, array, image, ASCII-table, bintable,\nVALUE:      none\nCOMMENT:    descriptive comment\nDEFINITION: Columns 1-8 contain ASCII blanks. This keyword has no associated \nvalue. Columns 9-80 may contain any ASCII text.  Any number of card images \nwith blank keyword fields may appear in a header.\nâ‹®\nKEYWORD:    XTENSION\nREFERENCE:  FITS Standard - version 4.0 - Appendix C\nCLASS:      general\nSTATUS:     mandatory\nHDU:        extension, array, image, ASCII-table, bintable,\nVALUE:      string\nCOMMENT:    marks beginning of new HDU\nDEFINITION: The value field shall contain a character string giving the name of \nthe extension type. This keyword is mandatory for an extension header and must \nnot appear in the primary header. For an extension that is not a standard \nextension, the type name must not be the same as that of a standard extension.\n","category":"page"},{"location":"pages/tools/","page":"Basic tools","title":"Basic tools","text":"fits_keyword(keyword::String; msg=true)","category":"page"},{"location":"pages/tools/#CamiFITS.fits_keyword-Tuple{String}","page":"Basic tools","title":"CamiFITS.fits_keyword","text":"fits_keyword(keyword::String [; msg=true])\nfits_keyword([; hdutype=\"all\" [, msg=true]])\n\nDescription of the reserved keywords of the FITS standard:\n\n(blanks), ALL, AUTHOR, BITPIX, BLANK, BLOCKED, BSCALE, BUNIT, BZERO, CDELTn,  COMMENT, CROTAn, CRPIXn, CRVALn, CTYPEn, DATAMAX, DATAMIN, DATE, DATE-OBS, END, EPOCH, EQUINOX, EXTEND, EXTLEVEL, EXTNAME, EXTVER, GCOUNT, GROUPS, HISTORY, INSTRUME, NAXIS, NAXISn, OBJECT, OBSERVER, ORIGIN, PCOUNT, PSCALn, PTYPEn, PZEROn, REFERENC, SIMPLE, TBCOLn, TDIMn, TDISPn, TELESCOP, TFIELDS, TFORMn, THEAP, TNULLn, TSCALn, TTYPEn, TUNITn, TZEROn, XTENSION,\n\nwhere n = 1,...,nmax as specified for the keyword. Use the keyword \"ALL\"  to dump the full list of keyword descriptions.\n\nThe descriptions are based on appendix C to FITS standard - version 4.0, which is not part of the standard but included for convenient reference.\n\njulia> fits_keyword(\"naxisn\");\nKEYWORD:    NAXISn\nREFERENCE:  FITS Standard - version 4.0 - Appendix C\nCLASS:      general\nSTATUS:     mandatory\nHDU:        primary, groups, extension, array, image, ASCII-table, bintable,\nVALUE:      integer\nRANGE:      [0:]\nCOMMENT:    size of the axis\nDEFINITION: The value field of this indexed keyword shall contain a non-negative integer,  \nrepresenting the number of elements along axis n of a data array.\nThe NAXISn must be present for all values n = 1,...,NAXIS, and for no other values of n.   \nA value of zero for any of the NAXISn signifies that no data follow the header in the HDU. \nIf NAXIS is equal to 0, there should not be any NAXISn keywords.\n\njulia> fits_keyword()\nFITS defined keywords:\n(blanks) AUTHOR   BITPIX   BLANK    BLOCKED  BSCALE   BUNIT    BZERO    \nCDELTn   COMMENT  CROTAn   CRPIXn   CRVALn   CTYPEn   DATAMAX  DATAMIN  \nDATE     DATE-OBS END      EPOCH    EQUINOX  EXTEND   EXTLEVEL EXTNAME  \nEXTVER   GCOUNT   GROUPS   HISTORY  INSTRUME NAXIS    NAXISn   OBJECT   \nOBSERVER ORIGIN   PCOUNT   PSCALn   PTYPEn   PZEROn   REFERENC SIMPLE   \nTBCOLn   TDIMn    TDISPn   TELESCOP TFIELDS  TFORMn   THEAP    TNULLn   \nTSCALn   TTYPEn   TUNITn   TZEROn   XTENSION\n\nHDU options: 'primary', 'extension', 'array', 'image', 'ASCII-table', 'bintable'\n\nreference: FITS Standard - version 4.0 - Appendix C\n\n\n\n\n\n","category":"method"},{"location":"pages/tools/#FITS-terminology","page":"Basic tools","title":"FITS terminology","text":"","category":"section"},{"location":"pages/tools/","page":"Basic tools","title":"Basic tools","text":"fits_terminology(term::String; test=false)","category":"page"},{"location":"pages/tools/#CamiFITS.fits_terminology-Tuple{String}","page":"Basic tools","title":"CamiFITS.fits_terminology","text":"fits_terminology([term::String [; test=false]])\n\nDescription of the defined terms from FITS standard: \n\nANSI, ASCII, ASCII NULL, ASCII character, ASCII digit, ASCII space, ASCII text,  Array, Array value, Basic FITS, Big endian, Bit, Byte, Card image,  Character string, Conforming extension, Data block, Deprecate, Entry,  Extension, Extension type name, FITS, FITS Support Office, FITS block,  FITS file, FITS structure, Field, File, Floating point, Fraction,  Group parameter value, HDU Header and Data Unit., Header, Header block, Heap,  IAU, IAUFWG, IEEE, IEEE NaN, IEEE special values, Indexed keyword,  Keyword name, Keyword record, MEF, Mandatory keyword, Mantissa, NOST,  Physical value, Pixel, Primary HDU, Primary data array, Primary header,  Random Group, Record, Repeat count, Reserved keyword, SIF, Special records,  Standard extension.\n\njulia> fits_terminology()\nFITS defined terms:\nANSI, ASCII, ASCII NULL, ASCII character, ..., SIF, Special records, Standard extension.\n\njulia> fits_terminology(\"FITS\")\nFITS:\nFlexible Image Transport System.\n\njulia> get(dictDefinedTerms, \"FITS\", nothing)\n\"Flexible Image Transport System.\"\n\njulia> fits_terminology(\"p\")\np:\nNot one of the FITS defined terms.\nsuggestions: Physical value, Pixel, Primary HDU, Primary data array, Primary header.\n\nsee FITS Standard - https://fits.gsfc.nasa.gov/fits_standard.html\n\n\n\n\n\n","category":"method"},{"location":"pages/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"pages/","page":"Index","title":"Index","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = CamiFITS","category":"page"},{"location":"#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"#CamiFITS.jl","page":"Home","title":"CamiFITS.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FITS stands for Flexible Image Transport System. This is an open standard  originally developed for the astronomy community to store telescope images  together with tables of spectral information. Over the years it has developed  into a scientific standard [W. D. Pence et al., A&A, 524 (2010) A42]. The standard is maintained by  the FITS Support Office at  NASA/GSFC [FITS standard - Version 4.0]. This website also offers a  FITS Conformance Verifier. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"CamiFITS offers the basic FITS functionality for scientific users not  requiring celestal coordinates. Optional Conforming Extensions are under  development. The user can create, read and extend .fits files as well as  create, edit and delete user-defined metainformation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Disclaimer 2025-01-08: The author is currently writing the documentation.  Many issues have been resolved, both with regard to FITS conformance and  code test coverage. The package steadily converges to a stable form.","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is installed using the Julia package manager","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"CamiFITS\")\n\njulia> using CamiFITS","category":"page"},{"location":"pages/manual/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"pages/manual/#Introduction","page":"Manual","title":"Introduction","text":"","category":"section"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"A FITS file (with defining extension .fits) consists of a sequence  of one or more Header and Data Units (FITS_HDUs), each containing  a FITS_dataobject preceeded by a FITS_header of records  with metainformation.","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"The first HDU in a .fits file  is called the PRIMARY HDU. It is an  IMAGE HDU, one of the STANDARD HDU types IMAGE, ASCII TABLE and  BINTABLE.","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"Let \"example.fits\" be an existing .fits file. By the commands ","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> filnam = \"example.fits\"\n\"example.fits\"\n\njulia> f = fits_read(filnam);","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"we asign the FITS object (read from the .fits file filnam on disc)  to the variable f. All information of a given .fits file is stored in  this FITS object, its structure is shown in the diagram below.","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"(Image: Image)","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"The fields of f (f.hdu[1], f.hdu[2], ...) correspond to  FITS_HDU objects. The PRIMARY HDU of the FITS object is represented by f.hdu[1]. The header records are contained in an array of  single-record cards.","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"The formal terminology of the FITS standard can be consulted using  fits_terminology: ","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> fits_terminology(\"HDU\")\nHDU:\nHeader and Data Unit. A data structure consisting of a header and the data the \nheader describes. Note that an HDU may consist entirely of a header with no \ndata blocks.","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"The words must, shall, may, recommended, required and optional are  to be interpreted as described in the IETF standard - RFC 2119.","category":"page"},{"location":"pages/manual/#Creating-a-simple-FITS-file","page":"Manual","title":"Creating a simple FITS file","text":"","category":"section"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"FITS files can be created with the command fits_create. This process proceeds in two steps: (a) first a FITS object is constructed  starting from the data provided (in Julia format); (b) this FITS  object is autosaved under the specifified name (e.g., name.fits).","category":"page"},{"location":"pages/manual/#Example:","page":"Manual","title":"Example:","text":"","category":"section"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"The minimal file conforming to the FITS standard consists of a single HDU  with an empty data field.","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> filnam = \"minimal.fits\";\n\njulia> f = fits_create(filnam; protect=false);\n\njulia> data = fits_info(f)\n\nFile: minimal.fits\nhdu: 1\nhdutype: PRIMARY\nDataType: Any\nDatasize: (0,)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    1 / number of data axes\nNAXIS1  =                    0 / length of data axis 1\nEXTEND  =                    T / FITS dataset may contain extensions\nEND\n\nAny[]\n\njulia> data\nAny[]\n\njulia> f.hdu[1].dataobject.data\nAny[]","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"Note how the FITS object is inspected using the  fits_info tool. Its output is the data of the hdu under  consideration (in this case f.hdu[1]). By setting the keyword protect  to false we remove the default overwrite protection for a file with  the name minimal.fits on disc.","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"NB. The FITS_header is autogenerated from the data.  The FITS object is made available for inspection purposes only.  Direct editing is not advised as to assure conformance to the  [FITS standard].  Editing tools are made available in the section Basic tools.","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"The FITS_header of a FITS_HDU is contained in an array  of single-record FITS_card objects as illustrated in the flow  diagram at the start of the introduction. To find the cardindex  associated with a keyword (e.g., \"NAXIS\") we can use the header.map:","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> i = f.hdu[1].header.map[\"NAXIS\"]\n3","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"The result is easily verified by inspecting the field card[i].cardindex:","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> f.hdu[1].header.card[i].cardindex\n3","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"Likewise, by inspecting the field card[i].keyword we confirm","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> f.hdu[1].header.card[i].keyword\n\"NAXIS\"","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"The full record is:","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> f.hdu[1].header.card[i].record\n\"NAXIS   =                    1 / number of data axes                            \"","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"Once ready it is good practice to remove the example: ","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> rm(filnam); f = nothing","category":"page"},{"location":"pages/manual/#FITS-inspection-tools","page":"Manual","title":"FITS inspection tools","text":"","category":"section"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"Rather than inspecting the FITS object directly (as demonstrated  above), CamiFITS offers the fits_info and  fits_record_dump tools. These tools will be demonstrated in the next  sections to demonstrate several FITS_HDU types.","category":"page"},{"location":"pages/manual/#FITS-file-for-a-simple-image","page":"Manual","title":"FITS file for a simple image","text":"","category":"section"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"In this section we demonstrate the fits_info tool to inspect the  primary hdu of a FITS object.","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"We start by creating a simple image in the form of a 3x3 matrix:","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> filnam = \"matrix.fits\";\n\njulia> data = [11,21,31,12,22,23,13,23,33];\n\njulia> data = reshape(data,(3,3,1))\n3Ã—3Ã—1 Array{Int64, 3}:\n[:, :, 1] =\n 11  12  13\n 21  22  23\n 31  23  33","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"We next create the FITS object for data (our image).","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> f = fits_create(filnam, data; protect=false);","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"We then inspect the FITS object using the info tool:","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> fits_info(f)\n\nFile: matrix.fits\nhdu: 1\nhdutype: PRIMARY\nDataType: Int64\nDatasize: (3, 3, 1)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    3 / number of data axes\nNAXIS1  =                    3 / length of data axis 1\nNAXIS2  =                    3 / length of data axis 2\nNAXIS3  =                    1 / length of data axis 3\nEXTEND  =                    T / FITS dataset may contain extensions\nEND\n\n3Ã—3Ã—1 Array{Int64, 3}:\n[:, :, 1] =\n 11  12  13\n 21  22  23\n 31  23  33\n\njulia> f = nothing","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"The keywords NAXIS1, NAXIS2 and NAXIS3 represent the dimensions  of the x y data matrix stacked in the z direction. ","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"The matrix elements are referred to as pixels and their bit size is  represented by the keyword BITPIX. In the above example the pixel value  is used to indicate the matrix indices, typically it will be an integer representing the gray tone of an image pixel.","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"Above, the FITS object f was removed from memory but its contents  was autosaved under the name filnam = 'matrix.fits'. To access the image  data of filnam we can fits_read the FITS object  from disk but it is simpler to access the data using fits_info for  image processing in Julia:","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> image = fits_info(filnam; hdr=false)\n3Ã—3Ã—1 Array{Int64, 3}:\n[:, :, 1] =\n 11  12  13\n 21  22  23\n 31  23  33\n\njulia> image == data\ntrue\n\njulia> rm(filnam); f = data = nothing","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"At this point the variable 'image' is available for further processing  (e.g. plotting) in julia.","category":"page"},{"location":"pages/manual/#Comment-on-the-casting-procedures","page":"Manual","title":"Comment on the casting procedures","text":"","category":"section"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"Note that the relevant mandatory keywords are autogenerated by  fits_create, starting from the Julia datatype and using the  FITS object casting procedures, cast_FITS,  cast_FITS_filnam, cast_FITS_HDU,  cast_FITS_header, cast_FITS_card and  cast_FITS_dataobject. Aside from constructing the FITS objects  these procedures impose comformance to the  FITS standard. ","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"NB. The .fits format is introduced to document and store images for  further processing by dedicated software. Although CamiFITS makes the  casting procedures available to the user, these typically remain hidden  as they are called internally by the functions fits_create,  fits_extend and fits_read. ","category":"page"},{"location":"pages/manual/#Extending-a-FITS-file-with-standard-HDUs","page":"Manual","title":"Extending a FITS file with standard HDUs","text":"","category":"section"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"In this section we demonstrate the fits_extend tool to extend the  primary hdu of a FITS object by examples of the three STANDARD HDU types (IMAGE, ASCII TABLE and BINTABLE).","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"We start by defining a simple image by reshaping a data vector into the form  of a 3x3 matrix (as ilustrated above):","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> data1 = [11,21,31,12,22,23,13,23,33];\n\njulia> data1 = reshape(data1,(3,3,1));","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"We next create a FITS file named 'example.fits' for  further use:","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> filnam = \"example.fits\";\n\njulia> fits_create(filnam, data1; protect=false);","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"At this point we could inspect filnam with the fits_info(filnam) command (see above), here we proceed by extending the file with an image HDU. ","category":"page"},{"location":"pages/manual/#Adding-an-image-HDU-extension","page":"Manual","title":"Adding an image HDU extension","text":"","category":"section"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"We first define (or load) another image","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> data2 = [11,21,12,22,13,23];\n\njulia> data2 = reshape(data2,(2,3,1));","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"Next we apply the extension and inspect the new HDU (hdu[2]):","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> fits_extend(filnam, data2; hdutype=\"image\");\n\njulia> fits_info(filnam, 2; hdr=true)\n\nFile: example.fits\nhdu: 2\nhdutype: 'IMAGE   '\nDataType: Int64\nDatasize: (2, 3, 1)\n\n  nr | Metainformation:\n--------------------------------------------------------------------------------\n   1 | XTENSION= 'IMAGE   '           / FITS standard extension\n   2 | BITPIX  =                   64 / number of bits per data pixel\n   3 | NAXIS   =                    3 / number of data axes\n   4 | NAXIS1  =                    2 / length of data axis 1\n   5 | NAXIS2  =                    3 / length of data axis 2\n   6 | NAXIS3  =                    1 / length of data axis 3\n   7 | END\n\n2Ã—3Ã—1 Array{Int64, 3}:\n[:, :, 1] =\n 11  12  13\n 21  22  23","category":"page"},{"location":"pages/manual/#Adding-a-table-HDU-extension","page":"Manual","title":"Adding a table HDU extension","text":"","category":"section"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"We first define (or load) the table (in this example a two-row table):","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> table = let\n       [true, 0x6c, 1081, 0x0439, 1081, 1.23, 1.01f-6, 1.01e-6, 'a', \"a\", \"abc\"],\n       [false, 0x6d, 1011, 0x03f3, 1011, 123.4, 3.01f-6, 30.01e-6, 'b', \"b\", \"abcdef\"]\n       end;","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"We extend the file by a table HDU by setting the hdutype to 'table'. The result is inspected using fits_info() by setting the hduindex to 3","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> fits_extend(filnam, table; hdutype=\"table\");\n\njulia> fits_info(filnam, 3; hdr=true)\n\nFile: example.fits\nhdu: 3\nhdutype: 'TABLE   '\n\n  nr | Metainformation:\n--------------------------------------------------------------------------------\n   1 | XTENSION= 'TABLE   '           / FITS standard extension\n   2 | BITPIX  =                    8 / number of bits per data pixel\n   3 | NAXIS   =                    2 / number of data axes\n   4 | NAXIS1  =                   56 / number of bytes/row\n   5 | NAXIS2  =                    2 / number of rows\n   6 | PCOUNT  =                    0 / number of bytes in supplemetal data area\n   7 | GCOUNT  =                    1 / data blocks contain single table\n   8 | TFIELDS =                   11 / number of data fields (columns)\n   9 | COLSEP  =                    1 / number of spaces in column separator\n  10 |\n  11 | TTYPE1  = 'HEAD1             ' / field header\n  12 | TBCOL1  =                    1 / pointer to field column 1\n  13 | TFORM1  = 'I1      '           / field datatype specifier\n  14 | TDISP1  = 'I1      '           / proposed field display format\n  15 |\n  16 | TTYPE2  = 'HEAD2             ' / field header\n  17 | TBCOL2  =                    3 / pointer to field column 2\n  18 | TFORM2  = 'I3      '           / field datatype specifier\n  19 | TDISP2  = 'I3      '           / proposed field display format\n  20 |\n  21 | TTYPE3  = 'HEAD3             ' / field header\n  22 | TBCOL3  =                    7 / pointer to field column 3\n  23 | TFORM3  = 'I4      '           / field datatype specifier\n  24 | TDISP3  = 'I4      '           / proposed field display format\n  25 |\n  26 | TTYPE4  = 'HEAD4             ' / field header\n  27 | TBCOL4  =                   12 / pointer to field column 4\n  28 | TFORM4  = 'I4      '           / field datatype specifier\n  29 | TDISP4  = 'I4      '           / proposed field display format\n  30 | TZERO4  =                32768 / zero offset of field 4\n  31 | TSCAL4  =                  1.0 / scale factor of field 4\n  32 |\n  33 | TTYPE5  = 'HEAD5             ' / field header\n  34 | TBCOL5  =                   17 / pointer to field column 5\n  35 | TFORM5  = 'I4      '           / field datatype specifier\n  36 | TDISP5  = 'I4      '           / proposed field display format\n  37 |\n  38 | TTYPE6  = 'HEAD6             ' / field header\n  39 | TBCOL6  =                   22 / pointer to field column 6\n  40 | TFORM6  = 'F6.2    '           / field datatype specifier\n  41 | TDISP6  = 'F6.2    '           / proposed field display format\n  42 |\n  43 | TTYPE7  = 'HEAD7             ' / field header\n  44 | TBCOL7  =                   29 / pointer to field column 7\n  45 | TFORM7  = 'E7.2    '           / field datatype specifier\n  46 | TDISP7  = 'E7.2    '           / proposed field display format\n  47 |\n  48 | TTYPE8  = 'HEAD8             ' / field header\n  49 | TBCOL8  =                   37 / pointer to field column 8\n  50 | TFORM8  = 'D8.3    '           / field datatype specifier\n  51 | TDISP8  = 'D8.3    '           / proposed field display format\n  52 |\n  53 | TTYPE9  = 'HEAD9             ' / field header\n  54 | TBCOL9  =                   46 / pointer to field column 9\n  55 | TFORM9  = 'A1      '           / field datatype specifier\n  56 | TDISP9  = 'A1      '           / proposed field display format\n  57 |\n  58 | TTYPE10 = 'HEAD10            ' / field header\n  59 | TBCOL10 =                   48 / pointer to field column 10\n  60 | TFORM10 = 'A1      '           / field datatype specifier\n  61 | TDISP10 = 'A1      '           / proposed field display format\n  62 |\n  63 | TTYPE11 = 'HEAD11            ' / field header\n  64 | TBCOL11 =                   50 / pointer to field column 11\n  65 | TFORM11 = 'A6      '           / field datatype specifier\n  66 | TDISP11 = 'A6      '           / proposed field display format\n  67 |\n  68 | END\n\n2-element Vector{String}:\n \" 1 108 1081 1081 1081   1.23 1.01E-6 1.010D-6 a a    abc\"\n \" 0 109 1011 1011 1011 123.40 3.01E-6 3.001D-5 b b abcdef\"","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"Note that the numerical-input 'table' has been cast in the form of an array of printable-ASCII characters ordered in columns of width defined by the  'TBCOL#' keyword values in a FORTRAN format as specified by the 'TFORM#'  keyword values.","category":"page"},{"location":"pages/manual/#Adding-a-binary-table-HDU-extension","page":"Manual","title":"Adding a binary table HDU extension","text":"","category":"section"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"The same two-line table can also be included as a BINARY TABLE HDU by setting  the hdutype to 'bintable'.","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> fits_extend(filnam, table; hdutype=\"bintable\");\n\njulia> fits_info(filnam, 4; hdr=true)\n\nFile: example.fits\nhdu: 4\nhdutype: 'BINTABLE'\n\n  nr | Metainformation:\n--------------------------------------------------------------------------------\n   1 | XTENSION= 'BINTABLE'           / FITS standard extension\n   2 | BITPIX  =                    8 / number of bits per data pixel\n   3 | NAXIS   =                    2 / number of data axes\n   4 | NAXIS1  =                   52 / number of bytes/row\n   5 | NAXIS2  =                    2 / number of rows\n   6 | PCOUNT  =                    0 / number of bytes in supplemetal data area\n   7 | GCOUNT  =                    1 / data blocks contain single table\n   8 | TFIELDS =                   11 / number of data fields (columns)\n   9 |\n  10 | TTYPE1  = 'HEAD1   '           / field header\n  11 | TFORM1  = '1K      '           / field datatype specifier\n  12 |\n  13 | TTYPE2  = 'HEAD2   '           / field header\n  14 | TFORM2  = '1B      '           / field datatype specifier\n  15 |\n  16 | TTYPE3  = 'HEAD3   '           / field header\n  17 | TFORM3  = '1K      '           / field datatype specifier\n  18 |\n  19 | TTYPE4  = 'HEAD4   '           / field header\n  20 | TFORM4  = '1I      '           / field datatype specifier\n  21 | TZERO4  = 32768                / zero offset of field 4\n  22 | TSCAL4  =                  1.0 / scale factor of field 4\n  23 |\n  24 | TTYPE5  = 'HEAD5   '           / field header\n  25 | TFORM5  = '1K      '           / field datatype specifier\n  26 |\n  27 | TTYPE6  = 'HEAD6   '           / field header\n  28 | TFORM6  = '1D      '           / field datatype specifier\n  29 |\n  30 | TTYPE7  = 'HEAD7   '           / field header\n  31 | TFORM7  = '1E      '           / field datatype specifier\n  32 |\n  33 | TTYPE8  = 'HEAD8   '           / field header\n  34 | TFORM8  = '1D      '           / field datatype specifier\n  35 |\n  36 | TTYPE9  = 'HEAD9   '           / field header\n  37 | TFORM9  = '1A      '           / field datatype specifier\n  38 |\n  39 | TTYPE10 = 'HEAD10  '           / field header\n  40 | TFORM10 = '1A      '           / field datatype specifier\n  41 |\n  42 | TTYPE11 = 'HEAD11  '           / field header\n  43 | TFORM11 = '6A      '           / field datatype specifier\n  44 |\n  45 | END\n\n2-element Vector{Any}:\n Any[1, 0x6c, 1081, 0x0439, 1081, 1.23, 1.01f-6, 1.01e-6, 'a', 'a', \"   abc\"]\n Any[0, 0x6d, 1011, 0x03f3, 1011, 123.4, 3.01f-6, 3.001e-5, 'b', 'b', \"abcdef\"]","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"Note that the two rows are of the same type (with Strings of equal length).","category":"page"},{"location":"pages/manual/#Easy-navigation","page":"Manual","title":"Easy navigation","text":"","category":"section"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"By assigning the FITS object to the variable 'f' we have access to the 4 HDUs  without the overhead of 4 times reading filnam into the info.","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> f = fits_read(filnam);\n\njulia> fits_info(f.hdu[1]; hdr=false)\n3Ã—3Ã—1 Array{Int64, 3}:\n[:, :, 1] =\n 11  12  13\n 21  22  23\n 31  23  33\n\njulia> fits_info(f.hdu[2]; hdr=false)\n2Ã—3Ã—1 Array{Int64, 3}:\n[:, :, 1] =\n 11  12  13\n 21  22  23\n\njulia> fits_info(f.hdu[3]; hdr=false)\n2-element Vector{String}:\n \" 1 108 1081 1081 1081 1081 1081 1081   1.23 1.01E-6 1.01D-6 a a    abc\"\n \" 0 109 1011 1011 1011 1011 1011 1011 123.40 3.01E-6 3.02D-5 b b abcdef\"\n\njulia> fits_info(f.hdu[4]; hdr=false)\n2-element Vector{Any}:\n Any[1, 0x6c, 1081, 0x0439, 1081, 1.23, 1.01f-6, 1.01e-6, 'a', 'a', \"   abc\"]\n Any[0, 0x6d, 1011, 0x03f3, 1011, 123.4, 3.01f-6, 3.001e-5, 'b', 'b', \"abcdef\"]","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"Finally we remove the example: ","category":"page"},{"location":"pages/manual/","page":"Manual","title":"Manual","text":"julia> rm(filnam); f = nothing","category":"page"}]
}
