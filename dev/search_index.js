var documenterSearchIndex = {"docs":
[{"location":"#CamiFITS.jl","page":"Home","title":"CamiFITS.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FITS stands for Flexible Image Transport System. This is an open standard  originally developed for the astronomy community to store telescope images  together with tables of spectral information. Over the years it has developed  into a scientific standard [W. D. Pence et al., A&A, 524 (2010) A42]. The standard is maintained by  the FITS Support Office at  NASA/GSFC [FITS standard - Version 4.0]. The website also offers a  FITS Conformance Verifier. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"CamiFITS offers the basic FITS functionality for scientific users not  requiring celestal coordinates. Optional Conforming Extensions are under  development. The user can create, read and extend .fits files as well as  create, edit and delete user-defined metainformation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Disclaimer 2023-06-6: The author is currently writing the manual. In this  process the code is tested, both with regard to FITS conformance and runtest  coverage. Known issues remain to be solved and the package certainly did  not reach a stable form.","category":"page"},{"location":"#Table-of-contents","page":"Home","title":"Table of contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is installed using the Julia package manager","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"CamiFITS\")\n\njulia> using CamiFITS","category":"page"},{"location":"#Manual","page":"Home","title":"Manual","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A FITS file (with defining extension .fits) consists of a sequence  of one or more Header and Data Units (FITS_HDUs), each containing  a FITS_dataobject preceeded by a FITS_header of records  with metainformation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The first HDU in a .fits file  is called the PRIMARY HDU. It is an  IMAGE HDU, one of the STANDARD HDU types IMAGE, ASCII TABLE and  BINTABLE.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let \"example.fits\" be an existing .fits file. By the commands ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> filnam = \"example.fits\"\n\"example.fits\"\n\njulia> f = fits_read(filnam);","category":"page"},{"location":"","page":"Home","title":"Home","text":"we asign the FITS object (read from the .fits file filnam on disc)  to the variable f. All information of a given .fits file is stored in  the FITS object, its structure is shown in the diagram below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Image)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The fields of f (f.hdu[1], f.hdu[2], ...) correspond to  FITS_HDU objects. The PRIMARY HDU of the FITS object is represented by f.hdu[1]. The header records are contained in an array of  single-record cards.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The formal terminology of the FITS standard can be consulted using  fits_terminology: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> fits_terminology(\"HDU\")\nHDU:\nHeader and Data Unit. A data structure consisting of a header and the data the \nheader describes. Note that an HDU may consist entirely of a header with no \ndata blocks.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The words must, shall, may, recommended, required and optional are  to be interpreted as described in the IETF standard - RFC 2119.","category":"page"},{"location":"#Creating-a-simple-FITS-file","page":"Home","title":"Creating a simple FITS file","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FITS files can be created using the command fits_create. This process proceeds in two steps: (a) first a FITS object is constructed  starting from the data provided (in Julia format); (b) this FITS  object is autosaved under the specifified name (e.g., name.fits).","category":"page"},{"location":"#Example:","page":"Home","title":"Example:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The minimal file conforming to the FITS standard consists of a single HDU  with an empty data field.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> filnam = \"minimal.fits\";\n\njulia> f = fits_create(filnam; protect=false);\n\njulia> fits_info(f)\n\nFile: minimal.fits\nhdu: 1\nhdutype: PRIMARY\nDataType: Any\nDatasize: (0,)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    1 / number of data axes\nNAXIS1  =                    0 / length of data axis 1\nEXTEND  =                    T / FITS dataset may contain extensions\nEND\n\nAny[]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note how the FITS object is inspected using the  fits_info tool.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The FITS_header of a FITS_HDU is contained in an array  of single-record FITS_card objects as illustrated in the flow  diagram above. To find the cardindex associated with a keyword  (e.g., \"NAXIS\") we can use the header.map:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> i = f.hdu[1].header.map[\"NAXIS\"]\n3","category":"page"},{"location":"","page":"Home","title":"Home","text":"The result is easily verified by inspecting the field card[i].cardindex:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> f.hdu[1].header.card[i].cardindex\n3","category":"page"},{"location":"","page":"Home","title":"Home","text":"Likewise, by inspecting the field card[i].keyword we confirm","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> f.hdu[1].header.card[i].keyword\n\"NAXIS\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"The full record is:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> f.hdu[1].header.card[i].record\n\"NAXIS   =                    1 / number of data axes                            \"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once ready it is good practice to remove the example: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> rm(filnam); f = nothing","category":"page"},{"location":"#The-FITS-file-for-a-simple-image","page":"Home","title":"The FITS file for a simple image","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Rather than inspecting the FITS object directly, CamiFITS offers the fits_info and fits_record_dump tools. To demonstrate these  tools we first create a simple image in the form of a 3x3 matrix:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> filnam = \"matrix.fits\";\n\njulia> data = [11,21,31,12,22,23,13,23,33];\n\njulia> data = reshape(data,(3,3,1))\n3×3×1 Array{Int64, 3}:\n[:, :, 1] =\n 11  12  13\n 21  22  23\n 31  23  33","category":"page"},{"location":"","page":"Home","title":"Home","text":"We next create the FITS object for 'data' (our image).","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> f = fits_create(filnam, data; protect=false);","category":"page"},{"location":"","page":"Home","title":"Home","text":"We then inspect the FITS object using the info tool:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> fits_info(f)\n\nFile: matrix.fits\nhdu: 1\nhdutype: PRIMARY\nDataType: Int64\nDatasize: (3, 3, 1)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    3 / number of data axes\nNAXIS1  =                    3 / length of data axis 1\nNAXIS2  =                    3 / length of data axis 2\nNAXIS3  =                    1 / length of data axis 3\nEXTEND  =                    T / FITS dataset may contain extensions\nEND\n\n3×3×1 Array{Int64, 3}:\n[:, :, 1] =\n 11  12  13\n 21  22  23\n 31  23  33\n\njulia> f = nothing","category":"page"},{"location":"","page":"Home","title":"Home","text":"The keywords NAXIS1, NAXIS2 and NAXIS3 represent the dimensions  of the x y data matrix stacked in the z direction. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The matrix elements are referred to as pixels and their bit size is  represented by the keyword BITPIX. In the above example the pixel value  is used to indicate the matrix indices, typically it will be an integer representing the gray tone of an image pixel.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Above, the FITS object f was removed from memory but its contents  was autosaved under the name filnam = 'matrix.fits'. To access the image  data of filnam we can fits_read the FITS object  from disk but it is simpler to access the data using fits_info for  image processing in Julia:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> dataout = fits_info(filnam; msg=false)\n3×3×1 Array{Int64, 3}:\n[:, :, 1] =\n 11  12  13\n 21  22  23\n 31  23  33\n\njulia> dataout == data\ntrue\n\njulia> rm(filnam); f = data = nothing","category":"page"},{"location":"","page":"Home","title":"Home","text":"At this point the image dataout is available for further processing  (e.g. plotting) in julia.","category":"page"},{"location":"#Comment-on-the-casting-procedures","page":"Home","title":"Comment on the casting procedures","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Note that the relevant mandatory keywords are autogenerated by  fits_create, starting from the Julia datatype and using the  FITS object casting procedures, cast_FITS,  cast_FITS_filnam, cast_FITS_HDU,  cast_FITS_header, cast_FITS_card and  cast_FITS_dataobject. Aside from constructing the FITS objects  these procedures impose comformance to the  FITS standard. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"For users primarily interested in image processing, the casting  procedures typically remain hidden as they are called internally by  fits_create and fits_read. ","category":"page"},{"location":"#FITS-information-tools","page":"Home","title":"FITS information tools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"fits_info(hdu::FITS_HDU; nr=true, msg=true)\nfits_record_dump(filnam::String, hduindex=0; hdr=true, dat=true, nr=true, msg=true)\nparse_FITS_TABLE(hdu::FITS_HDU)","category":"page"},{"location":"#CamiFITS.fits_info-Tuple{FITS_HDU}","page":"Home","title":"CamiFITS.fits_info","text":"fits_info(f::FITS [, hduindex=1] [; nr=false [, msg=true]])\nfits_info(hdu::FITS_HDU; nr=false, msg=true)\n\nMetafinformation and data of a given FITS_HDU object with optional record numbering. \n\nhduindex: HDU index (::Int - default: 1 = primary hdu)\nnr: include cardindex (::Bool - default: false)\nmsg: print message (::Bool)\n\nExample:\n\nTo demonstrate fits_info we first create the fits object f for subsequent  inspection.\n\njulia> filnam = \"minimal.fits\";\n\njulia> f = fits_create(filnam; protect=false);\n\njulia> fits_info(f)\n\nFile: minimal.fits\nhdu: 1\nhdutype: 'PRIMARY '\nDataType: Any\nDatasize: (0,)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    1 / number of data axes\nNAXIS1  =                    0 / length of data axis 1\nEXTEND  =                    T / FITS dataset may contain extensions\nEND\n\nAny[]\n\njulia> rm(filnam); f = nothing\n\nfits_info(filnam::String [, hduindex=1] [; nr=true [, msg=true]])\n\nSame as above but creating the fits object after reading filnam from disc and with default record nubering.\n\nhduindex: HDU index (::Int - default: 1 = primary hdu)\nnr: include cardindex (::Bool - default: true)\nmsg: print message (::Bool)\n\nExample:\n\njulia> filnam = \"minimal.fits\";\n\njulia> fits_create(filnam; protect=false);\n\njulia> fits_info(filnam)\n\nFile: minimal.fits\nhdu: 1\nhdutype: 'PRIMARY '\nDataType: Any\nDatasize: (0,)\n\n  nr | Metainformation:\n---------------------------------------------------------------------------------------\n   1 | SIMPLE  =                    T / file does conform to FITS standard\n   2 | BITPIX  =                   64 / number of bits per data pixel\n   3 | NAXIS   =                    1 / number of data axes\n   4 | NAXIS1  =                    0 / length of data axis 1\n   5 | EXTEND  =                    T / FITS dataset may contain extensions\n   6 | END\n\nAny[]\n\njulia> rm(filnam)\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.fits_record_dump","page":"Home","title":"CamiFITS.fits_record_dump","text":"fits_record_dump(filnam [, hduindex=0] [; hdr=true [, dat=true [, nr=true [, msg=true]]]])\n\nListing of all single-line records (card records) as read from filnam on disc. The dump proceeds without casting of FITS objects; i.e., without  FITS-conformance testing.\n\nhduindex: HDU index (::Int - default: 1 = primary hdu)\nhdr: show header (::Bool - default: true)\ndat: show data (::Bool - default: true)\nnr: include record numbers (::Bool - default: true)\nmsg: print message (::Bool)\n\nExample:\n\njulia> filnam = \"minimal.fits\";\n\njulia> data = [0x0000043e, 0x0000040c, 0x0000041f];\n\njulia> fits_create(filnam, data; protect=false);\n\njulia> fits_record_dump(filnam; dat=false)\n36-element Vector{Any}:\n \"   1 | SIMPLE  =               \" ⋯ 25 bytes ⋯ \"m to FITS standard             \"\n \"   2 | BITPIX  =               \" ⋯ 25 bytes ⋯ \"er data pixel                  \"\n \"   3 | NAXIS   =               \" ⋯ 25 bytes ⋯ \"xes                            \"\n \"   4 | NAXIS1  =               \" ⋯ 25 bytes ⋯ \"xis 1                          \"\n \"   5 | BZERO   =           2147\" ⋯ 25 bytes ⋯ \"e to that of unsigned integer  \"\n \"   6 | BSCALE  =               \" ⋯ 25 bytes ⋯ \"factor                         \"\n \"   7 | EXTEND  =               \" ⋯ 25 bytes ⋯ \" contain extensions            \"\n \"   8 | END                     \" ⋯ 25 bytes ⋯ \"                               \"\n \"   9 |                         \" ⋯ 25 bytes ⋯ \"                               \"\n ⋮\n \"  34 |                         \" ⋯ 25 bytes ⋯ \"                               \"\n \"  35 |                         \" ⋯ 25 bytes ⋯ \"                               \"\n \"  36 |                         \" ⋯ 25 bytes ⋯ \"                               \"\n\njulia> fits_record_dump(filnam; hdr=false)\n36-element Vector{Any}:\n \"  37 | \\0\\0\\0\\0\\0\\0\\0\\v\\0\\0\\0\\0\\0\\0\\0\\x15\\0\\0\\0\\0\\0\\0\\0\\x1f\" ⋯ 25 bytes ⋯ \"\\0\\0\\0\\0\\0\\0\\r\\0\\0\\0\\0\\0\\0\\0\\x17\\0\\0\\0\\0\\0\\0\\0!\\0\\0\\0\\0\\0\\0\\0\\0\"\n \"  38 | \\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ⋯ 25 bytes ⋯ \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"\n \"  39 | \\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ⋯ 25 bytes ⋯ \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"\n ⋮\n \"  70 | \\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ⋯ 25 bytes ⋯ \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"\n \"  71 | \\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ⋯ 25 bytes ⋯ \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"\n \"  72 | \\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ⋯ 25 bytes ⋯ \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"\n\njulia> rm(filnam); f = nothing\n\n\n\n\n\n","category":"function"},{"location":"#CamiFITS.parse_FITS_TABLE-Tuple{FITS_HDU}","page":"Home","title":"CamiFITS.parse_FITS_TABLE","text":"parse_FITS_TABLE(hdu::FITS_HDU)\n\nParse FITS_TABLE (ASCII table) into a Vector of its columns for further processing by the user. Default formatting in ISO 2004 FORTRAN data format specified by keys \"TFORMS1\" - \"TFORMSn\"). Display formatting in ISO 2004 FORTRAN data format (\"TDISP1\" - \"TDISPn\") prepared for user editing.\n\nExample:\n\nstrExample = \"example.fits\"\ndata = [10, 20, 30]\nfits_create(strExample, data; protect=false)\n\nt1 = Float16[1.01E-6,2.0E-6,3.0E-6,4.0E-6,5.0E-6]\nt2 = [0x0000043e, 0x0000040c, 0x0000041f, 0x0000042e, 0x0000042f]\nt3 = [1.23,2.12,3.,4.,5.]\nt4 = ['a','b','c','d','e']\nt5 = [\"a\",\"bb\",\"ccc\",\"dddd\",\"ABCeeaeeEEEEEEEEEEEE\"]\ndata = [t1,t2,t3,t4,t5]\nfits_extend(strExample, data, \"TABLE\")\n\nf = fits_read(strExample)\nd = f[2].header.dict\nd = [get(d,\"TFORM\\$i\",0) for i=1:5]; println(strip.(d))\n  SubString{String}[\"'E6.1    '\", \"'I4      '\", \"'F4.2    '\", \"'A1      '\", \"'A20     '\"]\n\nf[2].dataobject.data                            # this is the table hdu\n  5-element Vector{String}:\n   \"1.0e-6 1086 1.23 a a                    \"\n   \"2.0e-6 1036 2.12 b bb                   \"\n   \"3.0e-6 1055 3.0  c ccc                  \"\n   \"4.0e-6 1070 4.0  d dddd                 \"\n   \"5.0e-6 1071 5.0  e ABCeeaeeEEEEEEEEEEEE \"\n\nparse_FITS_TABLE(f[2])\n  5-element Vector{Vector{T} where T}:\n   [1.0e-6, 2.0e-6, 3.0e-6, 4.0e-6, 5.0e-6]\n   [1086, 1036, 1055, 1070, 1071]\n   [1.23, 2.12, 3.0, 4.0, 5.0]\n   [\"a\", \"b\", \"c\", \"d\", \"e\"]\n   [\"a                   \", \"bb                  \", \"ccc                 \", \"dddd                \", \"ABCeeaeeEEEEEEEEEEEE\"]\n\n\n\n\n\n","category":"method"},{"location":"#FITS-creation-and-file-handling-tools","page":"Home","title":"FITS creation and file-handling tools","text":"","category":"section"},{"location":"#FITS-File-Methods","page":"Home","title":"FITS - File Methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"fits_create(filnam::String, data=nothing; protect=true, msg=true)\nfits_extend!(f::FITS, data_extend; hdutype=\"IMAGE\")\nfits_collect(filnamFirst::String, filnamLast::String; protect=true)\nfits_copy(fileStart::String, fileStop::String=\" \"; protect=true)\nfits_read(filnam::String)\nfits_save_as(f::FITS, filnam::String; protect=true)","category":"page"},{"location":"#CamiFITS.fits_create","page":"Home","title":"CamiFITS.fits_create","text":"fits_create(filnam [, data [; protect=true]])\n\nCreate .fits file of given filnam and return Array of HDUs. Key:\n\ndata: data primary hdu (::DataType)\nprotect: overwrite protection (::Bool)\n\nExamples:\n\njulia> filnam = \"test.fits\";\n\njulia> f = fits_create(filnam, data; protect=false);\n\njulia> fits_info(f)\n\nFile: test.fits\nhdu: 1\nhdutype: 'PRIMARY '\nDataType: Int64\nDatasize: (3, 3)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    2 / number of data axes\nNAXIS1  =                    3 / length of data axis 1\nNAXIS2  =                    3 / length of data axis 2\nEXTEND  =                    T / FITS dataset may contain extensions\nEND\n\n3×3 Matrix{Int64}:\n 11  21  31\n 12  22  23\n 13  23  33\n\njulia> rm(\"minimal.fits\"); f = nothing\n\n\n\n\n\n","category":"function"},{"location":"#CamiFITS.fits_extend!-Tuple{FITS, Any}","page":"Home","title":"CamiFITS.fits_extend!","text":"fits_extend!(f::FITS, data_extend; hdutype=\"IMAGE\")\n\nExtend the .fits file of given filnam with the data of hdutype from data_extend  and return Array of HDUs.\n\nExamples:\n\njulia> filnam = \"test.fits\";\n\njulia> f = fits_create(filnam; protect=false);\n\njulia> data = let\n       a0 = Bool[1, 0, 1, 0, 1, 0, 1];\n       a1 = [1.2, 2.1, 3.0, 4.0, 5.0, 6.0, 7.0];\n       a2 = Float32[1.01E-6, 2.0E-6, 3.0E-6, 4.0E-6, 5.0E-6, 6.0E-6, 7.0E-6];\n       a3 = Float64[1.01E-6, 2.0E-6, 3.0E-6, 4.0E-6, 5.0E-6, 6.0E-6, 7.0E-6];\n       a4 = [convert(Int16, Int(2^i) - 1) for i = 8:14];\n       a5 = [convert(Int32, Int(2^i) - 1) for i = 15:21];\n       a6 = [convert(Int64, Int(2^i) - 1) for i = 22:28];\n       a7 = [convert(UInt8, Int(2^i) - 1) for i = 1:7];\n       a8 = [convert(UInt16, Int(2^i) - 1) for i = 8:14];\n       a9 = [convert(UInt32, Int(2^i) - 1) for i = 15:21];\n       b1 = [convert(UInt64, Int(2^i) - 1) for i = 22:28];\n       b2 = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\n       b3 = [\"a\", \"bb\", \"ccc\", \"dddd\", \"ABCeeaeeEEEEEEEEEEEE\", \"qwerty\", \"qwerty\"];\n       data = (a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,b1,b2,b3);\n       end;\n\njulia> fits_extend!(f, data; hdutype=\"table\");\n\njulia> fits_info(f.hdu[2]; msg=false)\n7-element Vector{String}:\n \" T 1.2 1.01E-6 1.01D-6   255   \" ⋯ 35 bytes ⋯ \" 4194303 a                    a\"\n \" F 2.1 2.00E-6 2.00D-6   511   \" ⋯ 35 bytes ⋯ \" 8388607 b                   bb\"\n \" T 3.0 3.00E-6 3.00D-6  1023  1\" ⋯ 35 bytes ⋯ \"16777215 c                  ccc\"\n \" F 4.0 4.00E-6 4.00D-6  2047  2\" ⋯ 35 bytes ⋯ \"33554431 d                 dddd\"\n \" T 5.0 5.00E-6 5.00D-6  4095  5\" ⋯ 35 bytes ⋯ \"67108863 e ABCeeaeeEEEEEEEEEEEE\"\n \" F 6.0 6.00E-6 6.00D-6  8191 10\" ⋯ 35 bytes ⋯ \"34217727 f               qwerty\"\n \" T 7.0 7.00E-6 7.00D-6 16383 20\" ⋯ 35 bytes ⋯ \"68435455 g               qwerty\"\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.fits_collect-Tuple{String, String}","page":"Home","title":"CamiFITS.fits_collect","text":"fits_collect(fileStart::String, fileStop::String [; protect=true[], msg=true]])\n\nCombine \"fileStart\" with \"fileStop\" (with mandatory \".fits\" extension)\n\nKey:\n\nprotect::Bool: overwrite protection\nmsg::Bool: allow status message\n\nExample:\n\njulia> f = fits_collect(\"T1.fits\", \"T5.fits\"; protect=false);\n'T1-T5.fits': file created\n\njulia> fits_info(f);\nFile: T1-T5.fits\nhdu: 1\nhdutype: PRIMARY\nDataType: UInt32\nDatasize: (512, 512, 5)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   32 / number of bits per data pixel\nNAXIS   =                    3 / number of data axes\nNAXIS1  =                  512 / length of data axis 1\nNAXIS2  =                  512 / length of data axis 2\nNAXIS3  =                    5 / length of data axis 3\nBZERO   =           2147483648 / offset data range to that of unsigned integer\nBSCALE  =                  1.0 / default scaling factor\nEXTEND  =                    T / FITS dataset may contain extensions\nCOMMENT    Extended FITS HDU   / http://fits.gsfc.nasa.gov/\nEND\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.fits_copy","page":"Home","title":"CamiFITS.fits_copy","text":"fits_copy(filnam1 [, filnam2=\"\" [; protect=true]])\n\nCopy filnam1 to filnam2 (with mandatory .fits extension) Key:\n\nprotect::Bool: overwrite protection\nmsg::Bool: allow status message\n\nExamples:\n\nfits_copy(\"T01.fits\")\n  'T01.fits' was saved as 'T01 - Copy.fits'\n\nfits_copy(\"T01.fits\", \"T01a.fits\")\n  strError: 'T01a.fits' in use (set ';protect=false' to lift overwrite protection)\n\nfits_copy(\"T01.fits\", \"T01a.fits\"; protect=false)\n  'T01.fits' was saved as 'T01a.fits'\n\n\n\n\n\n","category":"function"},{"location":"#CamiFITS.fits_read-Tuple{String}","page":"Home","title":"CamiFITS.fits_read","text":"fits_read(filnam::String)\n\nRead .fits file and return Array of FITS_HDUs\n\nExample:\n\njulia> filnam = \"minimal.fits\";\n\njulia> fits_create(filnam; protect=false);\n\njulia> f = fits_read(filnam);\n\njulia> fits_info(f)\nhdu: 1\nhdutype: PRIMARY\nDataType: Any\nDatasize: (0,)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    1 / number of data axes\nNAXIS1  =                    0 / length of data axis 1\nBZERO   =                  0.0 / offset data range to that of unsigned integer\nBSCALE  =                  1.0 / default scaling factor\nEXTEND  =                    T / FITS dataset may contain extensions\nEND\n\nAny[]\n\njulia> rm(filnam); f = nothing\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.fits_save_as-Tuple{FITS, String}","page":"Home","title":"CamiFITS.fits_save_as","text":"fits_save_as(f::FITS, filnam::String [; protect=true])\n\nSave the FITS object under the name filnam. Key:\n\nprotect::Bool: overwrite protection\n\njulia> f = fits_create(\"minimal.fits\"; protect=false);\n\njulia> fits_save_as(f, \"kanweg.fits\"; protect=false);\n\njulia> f = fits_read(\"kanweg.fits\");\n\njulia> fits_info(f)\nFile: kanweg.fits\nhdu: 1\nhdutype: PRIMARY\nDataType: Any\nDatasize: (0,)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    1 / number of data axes\nNAXIS1  =                    0 / length of data axis 1\nBZERO   =                  0.0 / offset data range to that of unsigned integer\nBSCALE  =                  1.0 / default scaling factor\nEXTEND  =                    T / FITS dataset may contain extensions\nCOMMENT    Extended FITS HDU   / http://fits.gsfc.nasa.gov/\nEND\n\nAny[]\n\n\n\n\n\n","category":"method"},{"location":"#FITS-Key-Methods","page":"Home","title":"FITS-Key Methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"fits_add_key!(f::FITS, hduindex::Int, key::String, val::Any, com::String)\nfits_delete_key!(f::FITS, hduindex::Int, key::String)\nfits_edit_key!(f::FITS, hduindex::Int, key::String, val::Real, com::String)\nfits_rename_key!(f::FITS, hduindex::Int, keyold::String, keynew::String)","category":"page"},{"location":"#CamiFITS.fits_add_key!-Tuple{FITS, Int64, String, Any, String}","page":"Home","title":"CamiFITS.fits_add_key!","text":"fits_add_key!(f::FITS, hduindex::Int, key::String, val::Any, com::String)\n\nAdd a header record of given 'key, value and comment' to 'HDU[hduindex]' of file with name 'filnam'\n\nExample:\n\njulia> filnam = \"minimal.fits\";\n\njulia> f = fits_create(filnam; protect=false);\n\njulia> fits_add_key!(f, 1, \"KEYNEW1\", true, \"This is the bew key\");\n\njulia> fits_info(f)\n\nFile: minimal.fits\nhdu: 1\nhdutype: 'PRIMARY '\nDataType: Any\nDatasize: (0,)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    1 / number of data axes\nNAXIS1  =                    0 / length of data axis 1\nBZERO   =                  0.0 / offset data range to that of unsigned integer\nBSCALE  =                  1.0 / default scaling factor\nEXTEND  =                    T / FITS dataset may contain extensions\nKEYNEW1 =                    T / This is the bew key\nEND\n\nAny[]\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.fits_delete_key!-Tuple{FITS, Int64, String}","page":"Home","title":"CamiFITS.fits_delete_key!","text":"fits_delete_key!(f::FITS, hduindex::Int, key::String)\n\nDelete a header record of given key, value and comment to FITS_HDU[hduindex] of file with name  'filnam'\n\nExamples:\n\njulia> filnam = \"minimal.fits\";\n\njulia> f = fits_create(filnam; protect=false);\n\njulia> fits_add_key!(f, 1, \"KEYNEW1\", true, \"This is the new key\");\n\njulia> cardindex = get(f.hdu[1].header.map,\"KEYNEW1\", nothing)\n8\n\njulia> keyword = f.hdu[1].header.card[cardindex].keyword\n\"KEYNEW1\"\n\njulia> cardindex = get(f.hdu[1].header.map,\"KEYNEW1\", nothing)\n8\n\njulia> fits_delete_key!(f, 1, \"KEYNEW1\");\n\njulia> cardindex = get(f.hdu[1].header.map,\"KEYNEW1\", nothing)\n\njulia> fits_delete_key!(f, 1, \"NAXIS\");\nERROR: FITSError: 17 - illegal keyword deletion (mandatory keyword)\nStacktrace:\n [1] fits_delete_key!(f::FITS, hduindex::Int64, key::String)\n   @ CamiFITS c:\\Users\\walra\\.julia\\dev\\CamiFITS.jl\\src\\fits_public_sector.jl:495\n [2] top-level scope\n   @ REPL[24]:1\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.fits_edit_key!-Tuple{FITS, Int64, String, Real, String}","page":"Home","title":"CamiFITS.fits_edit_key!","text":"fits_edit_key!(f::FITS, hduindex::Int, key::String, val::Any, com::String)\n\nEdit a header record of given 'key, value and comment' to 'HDU[hduindex]' of file with name 'filnam'\n\nExample:\n\ndata = DateTime(\"2020-01-01T00:00:00.000\")\nstrExample=\"minimal.fits\"\nfits_create(strExample; protect=false)\nfits_add_key!(strExample, 1, \"KEYNEW1\", true, \"this is record 5\")\nfits_edit_key!(strExample, 1, \"KEYNEW1\", data, \"record 5 changed to a DateTime type\")\n\nfits_info(f[1])\n\n  File: minimal.fits\n  hdu: 1\n  hdutype: PRIMARY\n  DataType: Any\n  Datasize: (0,)\n\n  Metainformation:\n  SIMPLE  =                    T / file does conform to FITS standard\n  NAXIS   =                    0 / number of data axes\n  EXTEND  =                    T / FITS dataset may contain extensions\n  COMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov\n  KEYNEW1 = '2020-01-01T00:00:00' / record 5 changed to a DateTime type\n  END\n\n  Any[]\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.fits_rename_key!-Tuple{FITS, Int64, String, String}","page":"Home","title":"CamiFITS.fits_rename_key!","text":"fits_rename_key!(filnam::String, hduindex::Int, keyold::String, keynew::String)\n\nRename the key of a header record of file with name 'filnam'\n\nExample:\n\njulia> filnam=\"minimal.fits\";\n\njulia> f = fits_create(filnam; protect=false);\n\njulia> fits_add_key!(f, 1, \"KEYNEW1\", true, \"this is a new record\");\n\njulia> fits_rename_key!(f, 1, \"KEYNEW1\",  \"KEYNEW2\");\n\njulia> fits_info(f.hdu[1])\nhdu: 1\nhdutype: 'PRIMARY '\nDataType: Any\nDatasize: (0,)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    1 / number of data axes\nNAXIS1  =                    0 / length of data axis 1\nBZERO   =                  0.0 / offset data range to that of unsigned integer\nBSCALE  =                  1.0 / default scaling factor\nEXTEND  =                    T / FITS dataset may contain extensions\nCOMMENT    Extended FITS HDU   / http://fits.gsfc.nasa.gov/\nKEYNEW2 =                    T / this is a new record\nEND\n\nAny[]\n\n\n\n\n\n","category":"method"},{"location":"#FITS-objects-and-casting-procedures","page":"Home","title":"FITS objects and casting procedures","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CamiFits is based on 6 FITS-object structs with dedicated object-casting procedures to enforce the  FITS standard .","category":"page"},{"location":"#FITS-object-structs","page":"Home","title":"FITS-object structs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FITS\nFITS_filnam\nFITS_HDU\nFITS_header\nFITS_card\nFITS_dataobject","category":"page"},{"location":"#CamiFITS.FITS","page":"Home","title":"CamiFITS.FITS","text":"FITS\n\nObject to hold a single .fits file.\n\nThe fields are\n\n.filnam::  the .fits filename (:String)\n.hdu: the collection of header-data-unit objects (::Vector{FITS_HDU}`)\n\n\n\n\n\n","category":"type"},{"location":"#CamiFITS.FITS_filnam","page":"Home","title":"CamiFITS.FITS_filnam","text":"FITS_filnam\n\nmutable FITS object to hold the decomposed name of a .fits file.\n\nThe fields are: \" .value:  for p#.fits this is p#.fits (::String)\n\n.name:  for p#.fits this is p# (::String)\n.prefix:  for p#.fits this is p (::String)\n.numerator:  for p#.fits this is #, a serial number (e.g., '3') or a range (e.g., '3-7') (::String)\n.extension:  for p#.fits this is .fits (::String)\n\n\n\n\n\n","category":"type"},{"location":"#CamiFITS.FITS_HDU","page":"Home","title":"CamiFITS.FITS_HDU","text":"FITS_HDU\n\nObject to hold a single \"Header and Data Unit\" (HDU).\n\nThe fields are\n\n.hduindex::  identifier (a file may contain more than one HDU) (:Int)\n.header:  the header object (::FITS_header)\n.dataobject:  the data object (::FITS_dataobject)\n\nNB. An empty data block (.dataobject = nothing) conforms to the standard.\n\n\n\n\n\n","category":"type"},{"location":"#CamiFITS.FITS_header","page":"Home","title":"CamiFITS.FITS_header","text":"FITS_header\n\nObject to hold the header information of a FITS_HDU.\n\nThe fields are:\n\n.card: the array of cards (::Vector{FITS_card})\n.map:  Dictionary keyword => recordindex (::Dict{String, Int})\n\n\n\n\n\n","category":"type"},{"location":"#CamiFITS.FITS_card","page":"Home","title":"CamiFITS.FITS_card","text":"FITS_card\n\nObject to hold the card information of the FITS_header object.\n\nThe fields are:\n\n.cardindex:  identifier of the header record (::Int)\n.record:  the full record on the card (::String)\n.keyword:  name of the corresponding header record (::String)\n.val:  value  of the corresponding header record (::Any)\n.comment:  comment on the corresponding header record (::String)\n\n\n\n\n\n","category":"type"},{"location":"#CamiFITS.FITS_dataobject","page":"Home","title":"CamiFITS.FITS_dataobject","text":"FITS_dataobject\n\nObject to hold the data of the FITS_HDU of given hdutype.\n\nThe fields are:\n\n.hdutype:  accepted types are 'PRIMARY', 'IMAGE' and 'TABLE' (::String)\n.data:  in the from appropriate for the hdutype (::Any)\n\n\n\n\n\n","category":"type"},{"location":"#FITS-object-casting","page":"Home","title":"FITS-object casting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The ordering of the FITS-object casting procedures is illustrated in the  flow diagram below. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Image)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The use of the casting procedures is recommended over direct application of the FITS-object strucs to ensure conformance to the  FITS standard .","category":"page"},{"location":"","page":"Home","title":"Home","text":"cast_FITS_filnam(filnam::String)\ncast_FITS_dataobject(hdutype::String, data)\ncast_FITS_header(dataobject::FITS_dataobject)\ncast_FITS_card(cardindex::Int, record::String)\ncast_FITS_HDU(hduindex::Int, header::FITS_header, data::FITS_dataobject)\ncast_FITS(filnam::String, hdu::Vector{FITS_HDU})","category":"page"},{"location":"#CamiFITS.cast_FITS_filnam-Tuple{String}","page":"Home","title":"CamiFITS.cast_FITS_filnam","text":"cast_FITS_filnam(filnam::String)\n\nCreate the FITS_filnam object to decompose filnam into its name,  prefix, numerator and extension.\n\nExample:\n\njulia> filnam = \"T23.01.fits\";\n\njulia> n = cast_FITS_filnam(filnam);\n\njulia> n.name, n.prefix, n.numerator, n.extension\n(\"T23.01\", \"T23.\", \"01\", \".fits\")\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.cast_FITS_dataobject-Tuple{String, Any}","page":"Home","title":"CamiFITS.cast_FITS_dataobject","text":"cast_FITS_dataobject(hdutype::String, data)\n\nCreate the FITS_dataobject object for given hduindex constructed from  the data in accordance to the specified hdutype: PRIMARY,  IMAGE, ARRAY, TABLE (ASCII table) or BINTABLE (binary table).\n\nExample:\n\njulia> data = [11,21,31,12,22,23,13,23,33];\n\njulia> data = reshape(data,(3,3));\n\njulia> d = cast_FITS_dataobject(\"image\", data)\nFITS_dataobject(\"'IMAGE   '\", [11 12 13; 21 22 23; 31 23 33])\n\njulia> d.data\n3×3 Matrix{Int64}:\n 11  12  13\n 21  22  23\n 31  23  33\n\njulia> d.hdutype\n\"'IMAGE   '\"\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.cast_FITS_header-Tuple{FITS_dataobject}","page":"Home","title":"CamiFITS.cast_FITS_header","text":"cast_FITS_header(dataobject::FITS_dataobject)\n\nCreate the FITS_header object from the dataobject. The  dataobject-input mode is used by fits_create to ceate the header object as part of creating the FITS object starting from Julia data  input.\n\nExample:\n\njulia> data = [11 21 31; 12 22 23; 13 23 33];\n\njulia> d = cast_FITS_dataobject(\"image\", data);\n\njulia> h = cast_FITS_header(d);\n\njulia> h.map\nDict{String, Int64} with 7 entries:\n  \"BITPIX\"   => 2\n  \"NAXIS2\"   => 5\n  \"XTENSION\" => 1\n  \"NAXIS1\"   => 4\n  \"\"         => 36\n  \"NAXIS\"    => 3\n  \"END\"      => 6\n\ncast_FITS_header(record::Vector{String})\n\nCreate the FITS_header object from a block of (a multiple of) 36  single-record strings (of 80 printable ASCII characters). The record-input mode is used by fits_read after reading the header records from disk  (see casting diagram above).\n\nExample:\n\njulia> record = [rpad(\"KEYWORD$i\",8) * \"'\" * rpad(\"$i\",70) * \"'\" for i=1:3];\n\njulia> blanks = [repeat(' ', 80) for i = 1:36-length(record)];\n\njulia> append!(record, blanks);   # to conform to the FITS standard\n\njulia> h = cast_FITS_header(record);\n\njulia> h.map\nDict{String, Int64} with 4 entries:\n  \"KEYWORD3\" => 3\n  \"KEYWORD2\" => 2\n  \"KEYWORD1\" => 1\n  \"\"         => 36                                                                '\"\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.cast_FITS_card-Tuple{Int64, String}","page":"Home","title":"CamiFITS.cast_FITS_card","text":"cast_FITS_card(cardindex::Int, record::String)\n\nCreate the FITS_card object for record with index cardindex.\n\nExample:\n\njulia> record = \"SIMPLE  =                    T / file does conform to FITS standard             \";\n\njulia> card = cast_FITS_card(1, record);\n\njulia> card.cardindex, card.keyword, card.value, card.comment\n(1, \"SIMPLE\", true, \"file does conform to FITS standard             \")\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.cast_FITS_HDU-Tuple{Int64, FITS_header, FITS_dataobject}","page":"Home","title":"CamiFITS.cast_FITS_HDU","text":"cast_FITS_HDU(hduindex::Int, header::FITS_header, data::FITS_dataobject)\n\nCreate the FITS_HDU object for given hduindex, header and data.\n\nExample:\n\njulia> data = [11 21 31; 12 22 23; 13 23 33];\n\njulia> d = cast_FITS_dataobject(\"image\", data);\n\njulia> h = cast_FITS_header(d);\n\njulia> hdu = cast_FITS_HDU(1, h, d);\n\njulia> hdu.dataobject.data\n3×3 Matrix{Int64}:\n 11  21  31\n 12  22  23\n 13  23  33\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.cast_FITS-Tuple{String, Vector{FITS_HDU}}","page":"Home","title":"CamiFITS.cast_FITS","text":"FITS(filnam::String, hdu::Vector{FITS_HDU})\n\nObject to hold a single .fits file.\n\nThe fields are\n\n.filnam:  filename of the corresponding .fits file (::String)\n.hdu:  array of FITS_HDUs (::Vector{FITS_HDU})\n\nExample:\n\njulia> data = [11 21 31; 12 22 23; 13 23 33];\n\njulia> d = cast_FITS_dataobject(\"image\", data);\n\njulia> h = cast_FITS_header(d);\n\njulia> hdu = cast_FITS_HDU(1, h, d);\n\njulia> f = cast_FITS(\"test.fits\", [hdu]);\n\njulia> f.hdu[1].dataobject.data\n3×3 Matrix{Int64}:\n 11  21  31\n 12  22  23\n 13  23  33\n\n\n\n\n\n","category":"method"},{"location":"#FITS-terminology-and-keyword-description","page":"Home","title":"FITS terminology and keyword description","text":"","category":"section"},{"location":"#FITS-keyword-description-tool","page":"Home","title":"FITS keyword description tool","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In the CamiFITS package the mandatory FITS keywords are autogenerated.  To support easy user access to the definition of all reserved FITS keywords  (mandatory or non-mandatory) CamiFITS includes the fits_keyword  tool. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The description of the FITS keywords is provided by fits_keyword:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> fits_keyword(\"bitpix\")\nKEYWORD:    BITPIX\nREFERENCE:  FITS Standard - version 4.0 - Appendix C\nCLASS:      general\nSTATUS:     mandatory\nHDU:        primary, groups, extension, array, image, ASCII-table, bintable,\nVALUE:      integer\nRANGE:      -64,-32,8,16,32,64\nCOMMENT:    bits per data value\nDEFINITION: The value field shall contain an integer.  The absolute value is\nused in computing the sizes of data structures. It shall specify the number of\nbits that represent a data value (using a minus sign for floating point data).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Without argument fits_keyword provides the list of all  FITS defined keywords (for the HDU types inplemented).","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> fits_keyword()\nFITS defined keywords:\n(blanks) AUTHOR   BITPIX   BLANK    BLOCKED  BSCALE   BUNIT    BZERO            \nCDELTn   COMMENT  CROTAn   CRPIXn   CRVALn   CTYPEn   DATAMAX  DATAMIN          \nDATE     DATE-OBS END      EPOCH    EQUINOX  EXTEND   EXTLEVEL EXTNAME          \nEXTVER   GCOUNT   GROUPS   HISTORY  INSTRUME NAXIS    NAXISn   OBJECT           \nOBSERVER ORIGIN   PCOUNT   PSCALn   PTYPEn   PZEROn   REFERENC SIMPLE           \nTBCOLn   TDIMn    TDISPn   TELESCOP TFIELDS  TFORMn   THEAP    TNULLn           \nTSCALn   TTYPEn   TUNITn   TZEROn   XTENSION \n\nHDU options: 'primary', 'extension', 'array', 'image', 'ASCII-table', 'bintable'\n\nreference: FITS Standard - version 4.0 - Appendix C","category":"page"},{"location":"","page":"Home","title":"Home","text":"Specifying the FITS HDU type in fits_keyword the user obtains the  restricted set of HDU-specific keywords.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> fits_keyword(hdutype=\"'PRIMARY '\")\nFITS defined keywords:\nHDU type: 'primary'\n- general\n  - mandatory: BITPIX   END      NAXIS    NAXISn   SIMPLE\n  - reserved : BLANK    BSCALE   BUNIT    BZERO    CDELTn   CROTAn   CRPIXn   \n               CRVALn   CTYPEn   DATAMAX  DATAMIN  EXTEND\n- bibliographic\n  - mandatory:\n  - reserved : AUTHOR   REFERENC\n- commentary\n  - mandatory:\n  - reserved : (blanks) COMMENT  HISTORY\n- observation\n  - mandatory:\n  - reserved : DATE-OBS EPOCH    EQUINOX  INSTRUME OBJECT   OBSERVER TELESCOP\n\nHDU options: 'primary', 'extension', 'array', 'image', 'ASCII-table', 'bintable'\n\nreference: FITS Standard - version 4.0 - Appendix C","category":"page"},{"location":"","page":"Home","title":"Home","text":"By using the keyword \"ALL\" the user can dump the full list of keyword  descriptions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> fits_keyword(\"all\")\nFITS defined keywords:\n\nKEYWORD:    (blank)\nREFERENCE:  FITS Standard - version 4.0 - Appendix C\nCLASS:      commentary\nSTATUS:     reserved\nHDU:        primary, groups, extension, array, image, ASCII-table, bintable,\nVALUE:      none\nCOMMENT:    descriptive comment\nDEFINITION: Columns 1-8 contain ASCII blanks. This keyword has no associated \nvalue. Columns 9-80 may contain any ASCII text.  Any number of card images \nwith blank keyword fields may appear in a header.\n⋮\nKEYWORD:    XTENSION\nREFERENCE:  FITS Standard - version 4.0 - Appendix C\nCLASS:      general\nSTATUS:     mandatory\nHDU:        extension, array, image, ASCII-table, bintable,\nVALUE:      string\nCOMMENT:    marks beginning of new HDU\nDEFINITION: The value field shall contain a character string giving the name of \nthe extension type. This keyword is mandatory for an extension header and must \nnot appear in the primary header. For an extension that is not a standard \nextension, the type name must not be the same as that of a standard extension.\n","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"#Terminology-and-keyword-descriptions","page":"Home","title":"Terminology and keyword descriptions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"fits_terminology(term::String; test=false)\nfits_keyword(keyword::String; msg=true)","category":"page"},{"location":"#CamiFITS.fits_terminology-Tuple{String}","page":"Home","title":"CamiFITS.fits_terminology","text":"fits_terminology([term::String [; test=false]])\n\nDescription of the defined terms from FITS standard: \n\nANSI, ASCII, ASCII NULL, ASCII character, ASCII digit, ASCII space, ASCII text,  Array, Array value, Basic FITS, Big endian, Bit, Byte, Card image,  Character string, Conforming extension, Data block, Deprecate, Entry,  Extension, Extension type name, FITS, FITS Support Office, FITS block,  FITS file, FITS structure, Field, File, Floating point, Fraction,  Group parameter value, HDU Header and Data Unit., Header, Header block, Heap,  IAU, IAUFWG, IEEE, IEEE NaN, IEEE special values, Indexed keyword,  Keyword name, Keyword record, MEF, Mandatory keyword, Mantissa, NOST,  Physical value, Pixel, Primary HDU, Primary data array, Primary header,  Random Group, Record, Repeat count, Reserved keyword, SIF, Special records,  Standard extension.\n\njulia> fits_terminology()\nFITS defined terms:\nANSI, ASCII, ASCII NULL, ASCII character, ..., SIF, Special records, Standard extension.\n\njulia> fits_terminology(\"FITS\")\nFITS:\nFlexible Image Transport System.\n\njulia> get(dictDefinedTerms, \"FITS\", nothing)\n\"Flexible Image Transport System.\"\n\njulia> fits_terminology(\"p\")\np:\nNot one of the FITS defined terms.\nsuggestions: Physical value, Pixel, Primary HDU, Primary data array, Primary header.\n\nsee FITS Standard - https://fits.gsfc.nasa.gov/fits_standard.html\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.fits_keyword-Tuple{String}","page":"Home","title":"CamiFITS.fits_keyword","text":"fits_keyword(keyword::String [; msg=true])\nfits_keyword([; hdutype=\"all\" [, msg=true]])\n\nDescription of the reserved keywords of the FITS standard:\n\n(blanks), ALL, AUTHOR, BITPIX, BLANK, BLOCKED, BSCALE, BUNIT, BZERO, CDELTn,  COMMENT, CROTAn, CRPIXn, CRVALn, CTYPEn, DATAMAX, DATAMIN, DATE, DATE-OBS, END, EPOCH, EQUINOX, EXTEND, EXTLEVEL, EXTNAME, EXTVER, GCOUNT, GROUPS, HISTORY, INSTRUME, NAXIS, NAXISn, OBJECT, OBSERVER, ORIGIN, PCOUNT, PSCALn, PTYPEn, PZEROn, REFERENC, SIMPLE, TBCOLn, TDIMn, TDISPn, TELESCOP, TFIELDS, TFORMn, THEAP, TNULLn, TSCALn, TTYPEn, TUNITn, TZEROn, XTENSION,\n\nwhere n = 1,...,nmax as specified for the keyword. Use the keyword \"ALL\"  to dump the full list of keyword descriptions.\n\nThe descriptions are based on appendix C to FITS standard - version 4.0, which is not part of the standard but included for convenient reference.\n\njulia> fits_keyword(\"naxisn\");\nKEYWORD:    NAXISn\nREFERENCE:  FITS Standard - version 4.0 - Appendix C\nCLASS:      general\nSTATUS:     mandatory\nHDU:        primary, groups, extension, array, image, ASCII-table, bintable,\nVALUE:      integer\nRANGE:      [0:]\nCOMMENT:    size of the axis\nDEFINITION: The value field of this indexed keyword shall contain a non-negative integer,  \nrepresenting the number of elements along axis n of a data array.\nThe NAXISn must be present for all values n = 1,...,NAXIS, and for no other values of n.   \nA value of zero for any of the NAXISn signifies that no data follow the header in the HDU. \nIf NAXIS is equal to 0, there should not be any NAXISn keywords.\n\njulia> fits_keyword()\nFITS defined keywords:\n(blanks) AUTHOR   BITPIX   BLANK    BLOCKED  BSCALE   BUNIT    BZERO    \nCDELTn   COMMENT  CROTAn   CRPIXn   CRVALn   CTYPEn   DATAMAX  DATAMIN  \nDATE     DATE-OBS END      EPOCH    EQUINOX  EXTEND   EXTLEVEL EXTNAME  \nEXTVER   GCOUNT   GROUPS   HISTORY  INSTRUME NAXIS    NAXISn   OBJECT   \nOBSERVER ORIGIN   PCOUNT   PSCALn   PTYPEn   PZEROn   REFERENC SIMPLE   \nTBCOLn   TDIMn    TDISPn   TELESCOP TFIELDS  TFORMn   THEAP    TNULLn   \nTSCALn   TTYPEn   TUNITn   TZEROn   XTENSION\n\nHDU options: 'primary', 'extension', 'array', 'image', 'ASCII-table', 'bintable'\n\nreference: FITS Standard - version 4.0 - Appendix C\n\n\n\n\n\n","category":"method"},{"location":"#FORTRAN","page":"Home","title":"FORTRAN","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FORTRAN_format\ncast_FORTRAN_format(str::String)\nFORTRAN_eltype_char(T::Type)\nFORTRAN_fits_table_tform(col::Vector{T}) where {T}","category":"page"},{"location":"#CamiFITS.FORTRAN_format","page":"Home","title":"CamiFITS.FORTRAN_format","text":"FORTRAN_format\n\nObject to hold a FORTRAN format specifier decomposed in its fields.\n\nAccepted datatype specifiers are:  Aw,  Iw,  Fw.d,  Ew.d,  Dw.d\n\nAccepted output formating specifiers are: Aw,  Iw.m,  Bw.m,  Ow.m, Zw.m,  Fw.d,  Ew.dEe,  ENw.d,  ESw.d,  Gw.dEe,  Dw.dEe. Notation: w - width, m (optional) - minimum number of digits, d - number of digits to right of decimal, e - number of digits in exponent N/S (optional) indicates engineering/scientific formating of the E type.\n\nThe fields are:\n\n.datatype: primary FORTRAN datatype (::String)\n.char: primary FORTRAN datatype character (::Char)\n.EngSci: secundary datatype character - N for engineering/ S for scientific (::Union{Char,Nothing})\n.width: width of numeric field (::Int)\n.nmin: minimum number of digits displayed (::Int)\n.ndec: number of digits to right of decimal (::Int)\n.nexp: number of digits in exponent (::Int)\n\n\n\n\n\n","category":"type"},{"location":"#CamiFITS.cast_FORTRAN_format-Tuple{String}","page":"Home","title":"CamiFITS.cast_FORTRAN_format","text":"cast_FORTRAN_format(format::String)\n\nDecompose the format specifier format into its fields and cast this into the FORTRAN_format object. Allowed format specifiers are of the types: Aw, Iw.m, Bw.m, Ow.m, Zw.m, Fw.d, Ew.dEe, ENw.d, ESw.d, Gw.dEe, Dw.dEe, with: w - width, m(optional) - minimum number of digits, d - number of digits to right of decimal, e - number of digits in exponent; N/S (optional) indicates engineering/scientific formating of the E type.\n\nExamples:\n\njulia> cast_FORTRAN_format(\"I10\")\nFORTRAN_format(\"Iw\", 'I', nothing, 10, 0, 0, 0)\n\njulia> cast_FORTRAN_format(\"I10.12\")\nFORTRAN_format(\"Iw.m\", 'I', nothing, 10, 12, 0, 0)\n\njulia> F = cast_FORTRAN_format(\"E10.5E3\")\nFORTRAN_format(\"Ew.dEe\", 'E', nothing, 10, 0, 5, 3)\n\njulia> F.Type, F.TypeChar, F.EngSci, F.width, F.nmin, F.ndec, F.nexp\n(\"Ew.dEe\", 'E', nothing, 10, 0, 5, 3)\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.FORTRAN_eltype_char-Tuple{Type}","page":"Home","title":"CamiFITS.FORTRAN_eltype_char","text":"FORTRAN_eltype_char(T::Type)\n\nFORTRAN datatype description character for julia type T: \n\nBool => 'L', UInt8 => 'B', Int16 => 'I', UInt16 => 'I', Int32 => 'J',  UInt32 => 'J', Int64 => 'K', UInt64 => 'K', Float32 => 'E', Float64 => 'D',  ComplexF32 => 'C', ComplexF64 => 'M'\n\nThe character '-' is returned for non-primitive FORTRAN datatypes and for  primitive datatypes not included in the FITS standard.\n\nExamples:\n\njulia> T = Type[Bool, Int8, UInt8, Int16, UInt16, Int32, UInt32, Int64, UInt64];\n\njulia> print([FORTRAN_eltype_char(T[i]) for i ∈ eachindex(T)])\nInt8: datatype not part of the FITS standard\n['L', '-', 'B', 'I', 'I', 'J', 'J', 'K', 'K']\n\njulia> T = [Float16, Float32, Float64, ComplexF32, ComplexF64];\n\njulia> print([FORTRAN_eltype_char(T[i]) for i ∈ eachindex(T)])\nFloat16: datatype not part of the FITS standard\n['-', 'E', 'D', 'C', 'M']\n\njulia> T = [String, Vector{Char}, FITS];\n\njulia> print([FORTRAN_eltype_char(T[i]) for i ∈ eachindex(T)])\nVector{Char}: not a FORTRAN datatype\nFITS: not a FORTRAN datatype\n['A', 'A', '-', '-']\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.FORTRAN_fits_table_tform-Union{Tuple{Vector{T}}, Tuple{T}} where T","page":"Home","title":"CamiFITS.FORTRAN_fits_table_tform","text":"FORTRAN_fits_table_tform(col::Vector{T}) where {T}\n\nFormat fits_table FORTRAN ASCII datafield descriptors: \n\nAw : Char, String\nIw : Decimal integer\nFw.d : Floating-point, fixed decimal notation\nEw.d : Floating point, exponential notation\nDw.d : Floating-point, exponential notation\n\nExample:\n\njulia> function set_examples()\n       a1 = Bool[1, 0, 1, 0, 1]\n       a2 = UInt8[108, 108, 108, 108, 108]\n       a3 = Int16[1081, 1082, 1083, 1084, 1085]\n       a4 = UInt16[1081, 1082, 1083, 1084, 1085]\n       a5 = Int32[1081, 1082, 1083, 1084, 10850]\n       a6 = UInt32[1081, 10820, 1083, 1084, 10850]\n       a7 = Int64[1081, 1082, 1083, 1084, 108500]\n       a8 = UInt64[1081, 1082, 1083, 1084, 108500]\n       a9 = [1.23, 2.12, 3.0, 40.0, 5.0]\n       a10 = Float32[1.01e-6, 2e-6, 3.0e-6, 4.0e6, 5.0e-6]\n       a11 = Float64[1.01e-6, 2.0e-6, 3.0e-6, 4.0e-6, 50.0e-6]\n       a12 = ['a', 'b', 'c', 'd', 'e']\n       a13 = [\"a\", \"bb\", \"ccc\", \"dddd\", \"ABCeeaeeEEEEEEEEEEEE\"]\n       return (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)\n       end\n\njulia> data = set_examples()\n\njulia> print([FORTRAN_fits_table_tform(data[i]) for i=1:13])\n[\"I1\", \"I3\", \"I4\", \"I4\", \"I5\", \"I5\", \"I6\", \"I6\", \"F5.2\", \"E7.2\", \"D7.2\", \"A1\", \"A20\"]\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
