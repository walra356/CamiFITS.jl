var documenterSearchIndex = {"docs":
[{"location":"#CamiFITS.jl","page":"Home","title":"CamiFITS.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FITS stands for Flexible Image Transport System. This is an open standard origionally developed for the astronomy community to store telescope images together with tables of spectral information. Over the years it has developed into a scientific standard [W. D. Pence et al., A&A, 524 (2010) A42]. The standard is maintained by the FITS Support Office at NASA/GSFC [FITS standard - Version 4.0]. The website also offers a FITS Conformance Verifier. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"CamiFITS offers the basic FITS functionality for scientific users not requiring celestal coordinates. Optional Conforming Extentions are under development. The user can create, read and extend .fits files as well as create, edit and delete user-defined metainformation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Disclaimer 2023-03-13: The author is currently writing the manual. In this process the code is tested, both with regard to FITS conformance and runtest coverage. Known issues remain to be solved and the package certainly did not reach a stable form.","category":"page"},{"location":"#Table-of-contents","page":"Home","title":"Table of contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is installed using the Julia package manager","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"CamiFITS\")\n\njulia> using CamiFITS","category":"page"},{"location":"#Manual","page":"Home","title":"Manual","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A FITS file consists of a sequence of one or more Header and Data Units (FITS_HDUs), each containing a FITS_data block preceeded by FITS_header records of metainformation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We distinguish between IMAGE and TABLE HDU data types. The first HDU in a .fits file is called the PRIMARY HDU.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let \"example.fits\" be an existing FITS file. By the commands ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> filnam = \"example.fits\"\n\njulia> f = fits_read(filnam)","category":"page"},{"location":"","page":"Home","title":"Home","text":"we asign the collection of FITS_HDU objects from filnam to the variable f. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The elements of f, f[1], f[2], ... correspond to the HDUs, with f[1] representing the PRIMARY HDU. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The formal terminology of the FITS standard can be consulted using terminology: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> terminology(\"primary hdu\")\nPrimary HDU:\nThe first HDU in a FITS file.","category":"page"},{"location":"","page":"Home","title":"Home","text":"FITS files can be created using the command fits_create.","category":"page"},{"location":"#The-simplest-FITS-file","page":"Home","title":"The simplest FITS file","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The simplest file conforming to the FITS standard consists of a single HDU containing an empty data field of the type Any[].","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> filnam = \"empty.fits\";\n\njulia> fits_create(filnam; protect=false)\n\njulia> f = fits_read(filnam);\n\njulia> fits_info(f[1])\n\nFile: empty.fits\nhdu: 1\nhdutype: PRIMARY\nDataType: Any\nDatasize: (0,)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nNAXIS   =                    0 / number of data axes\nEXTEND  =                    T / FITS dataset may contain extensions\nCOMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov\nEND\n\nAny[]\n\njulia> rm(filename); f = nothing","category":"page"},{"location":"#The-FITS-file-for-a-single-matrix","page":"Home","title":"The FITS file for a single matrix","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We first create the data field in the form of a 3x3 matrix:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> filename = \"matrix.fits\";\n\njulia> data = [11,21,31,12,22,23,13,23,33];\n\njulia> data = reshape(data,(3,3,1))\n3×3×1 Array{Int64, 3}:\n[:, :, 1] =\n 11  12  13\n 21  22  23\n 31  23  33","category":"page"},{"location":"","page":"Home","title":"Home","text":"We next create and inspact the FITS file for the matrix data","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> fits_create(filename, data; protect=false)\n\njulia> f = fits_read(filename);\n\njulia> fits_info(f[1])\n\nFile: matrix.fits\nhdu: 1\nhdutype: PRIMARY\nDataType: Int64\nDatasize: (3, 3, 1)\n\nMetainformation:\nSIMPLE  =                    T / file does conform to FITS standard\nBITPIX  =                   64 / number of bits per data pixel\nNAXIS   =                    3 / number of data axes\nNAXIS1  =                    3 / length of data axis 1\nNAXIS2  =                    3 / length of data axis 2\nNAXIS3  =                    1 / length of data axis 3\nBZERO   =                  0.0 / offset data range to that of unsigned integer\nBSCALE  =                  1.0 / default scaling factor\nEXTEND  =                    T / FITS dataset may contain extensions\nCOMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov\nEND\n\n3×3×1 Array{Int64, 3}:\n[:, :, 1] =\n 11  12  13\n 21  22  23\n 31  23  33\n\njulia> rm(filename); f = nothing","category":"page"},{"location":"","page":"Home","title":"Home","text":"The keywords NAXIS1, NAXIS2 and NAXIS3 represent the dimensions  of the data matrix in x, y and z direction. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The matrix elements are referred to as pixels and their bit size is  represented by the keyword BITPIX. In the above example the pixel value  is given by the matrix indices.","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"#Terminology","page":"Home","title":"Terminology","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"terminology(term::String; test=false)","category":"page"},{"location":"#CamiFITS.terminology-Tuple{String}","page":"Home","title":"CamiFITS.terminology","text":"terminology([term::String [; test=false]])\n\nDescription of the defined terms from FITS standard - Version 4.0: \n\nANSI, ASCII, ASCII NULL, ASCII character, ASCII digit, ASCII space, ASCII text,  Array, Array value, Basic FITS, Big endian, Bit, Byte, Card image,  Character string, Conforming extension, Data block, Deprecate, Entry,  Extension, Extension type name, FITS, FITS Support Office, FITS block,  FITS file, FITS structure, Field, File, Floating point, Fraction,  Group parameter value, HDU Header and Data Unit., Header, Header block, Heap,  IAU, IAUFWG, IEEE, IEEE NaN, IEEE special values, Indexed keyword,  Keyword name, Keyword record, MEF, Mandatory keyword, Mantissa, NOST,  Physical value, Pixel, Primary HDU, Primary data array, Primary header,  Random Group, Record, Repeat count, Reserved keyword, SIF, Special records,  Standard extension.\n\njulia> terminology()\nFITS defined terms:\nANSI, ASCII, ASCII NULL, ASCII character, ..., SIF, Special records, Standard extension.\n\njulia> terminology(\"FITS\")\nFITS:\nFlexible Image Transport System.\n\njulia> get(dictDefinedTerms, \"FITS\", nothing)\n\"Flexible Image Transport System.\"\n\njulia> terminology(\"p\")\np:\nNot one of the FITS defined terms.\nsuggestions: Physical value, Pixel, Primary HDU, Primary data array, Primary header.\n\nsee FITS Standard (Version 4.0) - https://fits.gsfc.nasa.gov/fits_standard.html\n\n\n\n\n\n","category":"method"},{"location":"#FITS-Types","page":"Home","title":"FITS - Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FITS_HDU{T,V}\nFITS_header\nFITS_data\nFITS_table\nFITS_name","category":"page"},{"location":"#CamiFITS.FITS_HDU","page":"Home","title":"CamiFITS.FITS_HDU","text":"FITS_HDU{T,V}\n\nObject to hold a single \"Header and Data Unit\" (HDU).\n\nThe fields are\n\n.filename:  name of the corresponding FITS file (::String)\n.hduindex::  identifier (a file may contain more than one HDU) (:Int)\n.header:  the header object where T=FITS_header (::T)\n.dataobject:  the data object where V=FITS_data (::V)\n\nNB. An empty data block (.dataobject = nothing) conforms to the standard.\n\n\n\n\n\n","category":"type"},{"location":"#CamiFITS.FITS_header","page":"Home","title":"CamiFITS.FITS_header","text":"FITS_header\n\nObject to hold the header information of a FITS_HDU.\n\nThe fields are:\n\n.hduindex:  identifier (a file may contain more than one HDU) (::Int)\n.records:  the header formated as an array of strings of 80 ASCII characters (::Array{String,1})\n.keys:  keys[i] - key corresponding to records[i] (record of index i)  (::Array{String,1})\n.values:  value[i] - corresponding to records[i]  (::Array{Any,1})\n.comments:  comments[i] - comment corresponding to records[i] (::String)\n.dict:  Dictionary key[i] => value[i] (::Dict{String,Any})\n.maps:  Dictionary key[i] => i (::Dict{String,Int})\n\n\n\n\n\n","category":"type"},{"location":"#CamiFITS.FITS_data","page":"Home","title":"CamiFITS.FITS_data","text":"FITS_data\n\nObject to hold the data of the FITS_HDU of given hduindex and hdutype.\n\nThe fields are:\n\n.hduindex:  identifier (a file may contain more than one HDU) (::Int)\n.hdutype:  accepted types are 'PRIMARY', 'IMAGE' and 'TABLE' (::String)\n.data:  in the from appropriate for the hdutype (::Any)\n\n\n\n\n\n","category":"type"},{"location":"#CamiFITS.FITS_table","page":"Home","title":"CamiFITS.FITS_table","text":"FITS_table\n\nObject to hold the data of a TABLE HDU (a FITS_HDU for ASCII tables). It contains the data in the form of records (rows) of ASCII strings.\n\nThe fields are:\n\n.hduindex:  identifier (a file may contain more than one HDU) (::Int)\n.rows:  the table formated as an array of rows of ASCII strings (::Array{String,1})\n\n\n\n\n\n","category":"type"},{"location":"#CamiFITS.FITS_name","page":"Home","title":"CamiFITS.FITS_name","text":"FITS_name\n\nFITS object to hold the decomposed name of a .fits file.\n\nThe fields are:\n\n.name:  for 'p#.fits' this is 'p#.fits' (::String)\n.prefix:  for 'p#.fits' this is 'p' (::String)\n.numerator:  for 'p#.fits' this is '#', a serial number (e.g., '3') or a range (e.g., '3-7') (::String)\n.extension:  for 'p#.fits' this is '.fits' (::String)\n\n\n\n\n\n","category":"type"},{"location":"#FITS-HDU-Methods","page":"Home","title":"FITS - HDU Methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"fits_info(hdu::FITS_HDU)\nparse_FITS_TABLE(hdu::FITS_HDU)","category":"page"},{"location":"#CamiFITS.fits_info-Tuple{FITS_HDU}","page":"Home","title":"CamiFITS.fits_info","text":"fits_info(hdu)\n\nPrint metafinformation and data of given FITS_HDU\n\nExample:\n\nstrExample = \"remove.fits\"\ndata = [11,21,31,12,22,23,13,23,33]\ndata = reshape(data,(3,3,1))\nfits_create(strExample, data; protect=false)\n\nf = fits_read(strExample)\nfits_info(f[1])\n\n  File: remove.fits\n  hdu: 1\n  hdutype: PRIMARY\n  DataType: Int64\n  Datasize: (3, 3, 1)\n\n  Metainformation:\n  SIMPLE  =                    T / file does conform to FITS standard\n  BITPIX  =                   64 / number of bits per data pixel\n  NAXIS   =                    3 / number of data axes\n  NAXIS1  =                    3 / length of data axis 1\n  NAXIS2  =                    3 / length of data axis 2\n  NAXIS3  =                    1 / length of data axis 3\n  BZERO   =                  0.0 / offset data range to that of unsigned integer\n  BSCALE  =                  1.0 / default scaling factor\n  EXTEND  =                    T / FITS dataset may contain extensions\n  COMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov\n  END\n\n  3×3×1 Array{Int64, 3}:\n  [:, :, 1] =\n   11  12  13\n   21  22  23\n   31  23  33\n\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.parse_FITS_TABLE-Tuple{FITS_HDU}","page":"Home","title":"CamiFITS.parse_FITS_TABLE","text":"parse_FITS_TABLE(hdu)\n\nParse FITS_TABLE (ASCII table) into a Vector of its columns for further processing by the user. Default formatting in ISO 2004 FORTRAN data format specified by keys \"TFORMS1\" - \"TFORMSn\"). Display formatting in ISO 2004 FORTRAN data format (\"TDISP1\" - \"TDISPn\") prepared for user editing.\n\nExample:\n\nstrExample = \"example.fits\"\ndata = [10, 20, 30]\nfits_create(strExample, data; protect=false)\n\nt1 = Float16[1.01E-6,2.0E-6,3.0E-6,4.0E-6,5.0E-6]\nt2 = [0x0000043e, 0x0000040c, 0x0000041f, 0x0000042e, 0x0000042f]\nt3 = [1.23,2.12,3.,4.,5.]\nt4 = ['a','b','c','d','e']\nt5 = [\"a\",\"bb\",\"ccc\",\"dddd\",\"ABCeeaeeEEEEEEEEEEEE\"]\ndata = [t1,t2,t3,t4,t5]\nfits_extend(strExample, data, \"TABLE\")\n\nf = fits_read(strExample)\nd = f[2].header.dict\nd = [get(d,\"TFORM$i\",0) for i=1:5]; println(strip.(d))\n  SubString{String}[\"'E6.1    '\", \"'I4      '\", \"'F4.2    '\", \"'A1      '\", \"'A20     '\"]\n\nf[2].dataobject.data                            # this is the table hdu\n  5-element Vector{String}:\n   \"1.0e-6 1086 1.23 a a                    \"\n   \"2.0e-6 1036 2.12 b bb                   \"\n   \"3.0e-6 1055 3.0  c ccc                  \"\n   \"4.0e-6 1070 4.0  d dddd                 \"\n   \"5.0e-6 1071 5.0  e ABCeeaeeEEEEEEEEEEEE \"\n\nparse_FITS_TABLE(f[2])\n  5-element Vector{Vector{T} where T}:\n   [1.0e-6, 2.0e-6, 3.0e-6, 4.0e-6, 5.0e-6]\n   [1086, 1036, 1055, 1070, 1071]\n   [1.23, 2.12, 3.0, 4.0, 5.0]\n   [\"a\", \"b\", \"c\", \"d\", \"e\"]\n   [\"a                   \", \"bb                  \", \"ccc                 \", \"dddd                \", \"ABCeeaeeEEEEEEEEEEEE\"]\n\n\n\n\n\n","category":"method"},{"location":"#FITS-File-Methods","page":"Home","title":"FITS - File Methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"cast_FITS_name(filename::String)\nfits_combine(filnamFirst::String, filnamLast::String; protect=true)\nfits_copy(filenameA::String, filenameB::String=\" \"; protect=true)\nfits_create(filename::String, data=[]; protect=true)\nfits_extend(filename::String, data_extend, hdutype=\"IMAGE\")\nfits_read(filename::String)","category":"page"},{"location":"#CamiFITS.cast_FITS_name-Tuple{String}","page":"Home","title":"CamiFITS.cast_FITS_name","text":"cast_FITS_name(str::String)\n\nDecompose the FITS filename 'filnam.fits' into its name, prefix, numerator and extension.\n\nExamples:\n\nstrExample = \"T23.01.fits\"\nf = cast_FITS_name(strExample)\nFITS_name(\"T23.01\", \"T23.\", \"01\", \".fits\")\n\nf.name, f.prefix, f.numerator, f.extension\n(\"T23.01\", \"T23.\", \"01\", \".fits\")\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.fits_combine-Tuple{String, String}","page":"Home","title":"CamiFITS.fits_combine","text":"fits_combine(strFirst, strLast [; protect=true])\n\nCopy \"filenameFirst\" to \"filenameLast\" (with mandatory \".fits\" extension)\n\nKey:\n\nprotect::Bool: overwrite protection\n\nExample:\n\nfits_combine(\"T01.fits\", \"T22.fits\")\n  'T01-T22.fits': file created\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.fits_copy","page":"Home","title":"CamiFITS.fits_copy","text":"fits_copy(filenameA [, filenameB=\"\" [; protect=true]])\n\nCopy \"filenameA\" to \"filenameB\" (with mandatory \".fits\" extension) Key:\n\nprotect::Bool: overwrite protection\n\nExamples:\n\nfits_copy(\"T01.fits\")\n  'T01.fits' was saved as 'T01 - Copy.fits'\n\nfits_copy(\"T01.fits\", \"T01a.fits\")\n  FitsError: 'T01a.fits' in use (set ';protect=false' to lift overwrite protection)\n\nfits_copy(\"T01.fits\", \"T01a.fits\"; protect=false)\n  'T01.fits' was saved as 'T01a.fits'\n\n\n\n\n\n","category":"function"},{"location":"#CamiFITS.fits_create","page":"Home","title":"CamiFITS.fits_create","text":"fits_create(filename [, data [; protect=true]])\n\nCreate FITS file of given filename [, optional data block [, default overwrite protection]] and return Array of HDUs. Key:\n\nprotect::Bool: overwrite protection\n\nExamples:\n\nstrExample = \"minimal.fits\"\nfits_create(strExample; protect=false)\n\nf = fits_read(strExample)\na = f[1].dataobject.data\nb = f[1].header.keys\nprintln(a);println(b)\n  Any[]\n  [\"SIMPLE\", \"NAXIS\", \"EXTEND\", \"COMMENT\", \"END\"]\n\nstrExample = \"remove.fits\"\ndata = [11,21,31,12,22,23,13,23,33]\ndata = reshape(data,(3,3,1))\nfits_create(strExample, data; protect=false)\n\nf = fits_read(strExample)\nfits_info(f[1])\n\n  File: remove.fits\n  hdu: 1\n  hdutype: PRIMARY\n  DataType: Int64\n  Datasize: (3, 3, 1)\n\n  Metainformation:\n  SIMPLE  =                    T / file does conform to FITS standard\n  BITPIX  =                   64 / number of bits per data pixel\n  NAXIS   =                    3 / number of data axes\n  NAXIS1  =                    3 / length of data axis 1\n  NAXIS2  =                    3 / length of data axis 2\n  NAXIS3  =                    1 / length of data axis 3\n  BZERO   =                  0.0 / offset data range to that of unsigned integer\n  BSCALE  =                  1.0 / default scaling factor\n  EXTEND  =                    T / FITS dataset may contain extensions\n  COMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov\n  END\n\n  3×3×1 Array{Int64, 3}:\n  [:, :, 1] =\n   11  12  13\n   21  22  23\n   31  23  33\n\n\n\n\n\n","category":"function"},{"location":"#CamiFITS.fits_extend","page":"Home","title":"CamiFITS.fits_extend","text":"fits_extend(filename, data_extend, hdutype=\"IMAGE\")\n\nExtend the FITS file of given filename with the data of hdutype from data_extend  and return Array of HDUs.\n\nExamples:\n\nstrExample = \"test_example.fits\"\ndata = [0x0000043e, 0x0000040c, 0x0000041f]\nfits_create(strExample, data; protect=false)\n\nf = fits_read(strExample)\na = Float16[1.01E-6,2.0E-6,3.0E-6,4.0E-6,5.0E-6]\nb = [0x0000043e, 0x0000040c, 0x0000041f, 0x0000042e, 0x0000042f]\nc = [1.23,2.12,3.,4.,5.]\nd = ['a','b','c','d','e']\ne = [\"a\",\"bb\",\"ccc\",\"dddd\",\"ABCeeaeeEEEEEEEEEEEE\"]\ndata = [a,b,c,d,e]\nfits_extend(strExample, data, \"TABLE\")\n\nf = fits_read(strExample)\nf[2].dataobject.data\n  5-element Vector{String}:\n   \"1.0e-6 1086 1.23 a a                    \"\n   \"2.0e-6 1036 2.12 b bb                   \"\n   \"3.0e-6 1055 3.0  c ccc                  \"\n   \"4.0e-6 1070 4.0  d dddd                 \"\n   \"5.0e-6 1071 5.0  e ABCeeaeeEEEEEEEEEEEE \"\n\nrm(strExample); f = data = a = b = c = d = e = nothing\n\n\n\n\n\n","category":"function"},{"location":"#CamiFITS.fits_read-Tuple{String}","page":"Home","title":"CamiFITS.fits_read","text":"fits_read(filename)\n\nRead FITS file and return Array of FITS_HDUs\n\nExample:\n\nstrExample = \"minimal.fits\"\nfits_create(strExample; protect=false)\n\nf = fits_read(strExample)\nf[1].dataobject.data\n  Any[]\n\nrm(strExample); f = nothing\n\n\n\n\n\n","category":"method"},{"location":"#FITS-Key-Methods","page":"Home","title":"FITS - Key Methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"fits_add_key(filename::String, hduindex::Int, key::String, val::Real, com::String)\nfits_delete_key(filename::String, hduindex::Int, key::String)\nfits_edit_key(filename::String, hduindex::Int, key::String, val::Real, com::String)\nfits_rename_key(filename::String, hduindex::Int, keyold::String, keynew::String)","category":"page"},{"location":"#CamiFITS.fits_add_key-Tuple{String, Int64, String, Real, String}","page":"Home","title":"CamiFITS.fits_add_key","text":"fits_add_key(filename, hduindex, key, value, comment)\n\nAdd a header record of given 'key, value and comment' to 'HDU[hduindex]' of file with name 'filename'\n\nExample:\n\nstrExample=\"minimal.fits\"\nfits_create(strExample; protect=false)\nfits_add_key(strExample, 1, \"KEYNEW1\", true, \"FITS dataset may contain extension\")\n\nf = fits_read(strExample)\nfits_info(f[1])\n\n  File: minimal.fits\n  hdu: 1\n  hdutype: PRIMARY\n  DataType: Any\n  Datasize: (0,)\n\n  Metainformation:\n  SIMPLE  =                    T / file does conform to FITS standard\n  NAXIS   =                    0 / number of data axes\n  EXTEND  =                    T / FITS dataset may contain extensions\n  COMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov\n  KEYNEW1 =                    T / FITS dataset may contain extension\n  END\n\n  Any[]\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.fits_delete_key-Tuple{String, Int64, String}","page":"Home","title":"CamiFITS.fits_delete_key","text":"fits_delete_key(filename, hduindex, key)\n\nDelete a header record of given key, value and comment to FITS_HDU[hduindex] of file with name  'filename'\n\nExamples:\n\nstrExample=\"minimal.fits\"\nfits_create(strExample; protect=false)\nfits_add_key(strExample, 1, \"KEYNEW1\", true, \"this is record 5\")\n\nf = fits_read(strExample)\nget(f[1].header.maps,\"KEYNEW1\",0)\n  5\n\nfits_delete_key(strExample, 1, \"KEYNEW1\")\n\nf = fits_read(strExample)\nget(f[1].header.maps,\"KEYNEW1\",0)\n  0\n\nfits_delete_key(filnam, 1, \"NAXIS\")\n 'NAXIS': cannot be deleted (key protected under FITS standard)\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.fits_edit_key-Tuple{String, Int64, String, Real, String}","page":"Home","title":"CamiFITS.fits_edit_key","text":"fits_edit_key(filename, hduindex, key, value, comment)\n\nEdit a header record of given 'key, value and comment' to 'HDU[hduindex]' of file with name 'filename'\n\nExample:\n\ndata = DateTime(\"2020-01-01T00:00:00.000\")\nstrExample=\"minimal.fits\"\nfits_create(strExample; protect=false)\nfits_add_key(strExample, 1, \"KEYNEW1\", true, \"this is record 5\")\nfits_edit_key(strExample, 1, \"KEYNEW1\", data, \"record 5 changed to a DateTime type\")\n\nf = fits_read(strExample)\nfits_info(f[1])\n\n  File: minimal.fits\n  hdu: 1\n  hdutype: PRIMARY\n  DataType: Any\n  Datasize: (0,)\n\n  Metainformation:\n  SIMPLE  =                    T / file does conform to FITS standard\n  NAXIS   =                    0 / number of data axes\n  EXTEND  =                    T / FITS dataset may contain extensions\n  COMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov\n  KEYNEW1 = '2020-01-01T00:00:00' / record 5 changed to a DateTime type\n  END\n\n  Any[]\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.fits_rename_key-Tuple{String, Int64, String, String}","page":"Home","title":"CamiFITS.fits_rename_key","text":"fits_rename_key(filename, hduindex, keyold, kewnew)\n\nRename the key of a header record of file with name 'filename'\n\nExample:\n\nstrExample=\"minimal.fits\"\nfits_create(strExample; protect=false)\nfits_add_key(strExample, 1, \"KEYNEW1\", true, \"this is record 5\")\nfits_rename_key(strExample, 1, \"KEYNEW1\",  \"KEYNEW2\")\n\nf = fits_read(strExample)\nfits_info(f[1])\n\n  File: minimal.fits\n  hdu: 1\n  hdutype: PRIMARY\n  DataType: Any\n  Datasize: (0,)\n\n  Metainformation:\n  SIMPLE  =                    T / file does conform to FITS standard\n  NAXIS   =                    0 / number of data axes\n  EXTEND  =                    T / FITS dataset may contain extensions\n  COMMENT    Primary FITS HDU    / http://fits.gsfc.nasa.gov\n  KEYNEW2 =                    T / this is record 5\n  END\n\n  Any[]\n\n\n\n\n\n","category":"method"},{"location":"#FORTRAN","page":"Home","title":"FORTRAN","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FORTRAN_format\ncast_FORTRAN_format(str::String)\ncast_FORTRAN_datatype(str::String)","category":"page"},{"location":"#CamiFITS.FORTRAN_format","page":"Home","title":"CamiFITS.FORTRAN_format","text":"FORTRAN_format\n\nObject to hold a FORTRAN format specifier decomposed in its fields.\n\nAccepted datatype specifiers are:  Aw,  Iw,  Fw.d,  Ew.d,  Dw.d\n\nAccepted output formating specifiers are: Aw,  Iw.m,  Bw.m,  Ow.m, Zw.m,  Fw.d,  Ew.dEe,  ENw.d,  ESw.d,  Gw.dEe,  Dw.dEe. Notation: w - width, m (optional) - minimum number of digits, d - number of digits to right of decimal, e - number of digits in exponent N/S (optional) indicates engineering/scientific formating of the E type.\n\nThe fields are:\n\n.Type: primary FORTRAN datatype (::String)\n.TypeChar: primary FORTRAN datatype character (::Char)\n.EngSci: secundary datatype character - N for engineering/ S for scientific (::Union{Char,Nothing})\n.width: width of numeric field (::Int)\n.nmin: minimum number of digits displayed (::Int)\n.ndec: number of digits to right of decimal (::Int)\n.nexp: number of digits in exponent (::Int)\n\n\n\n\n\n","category":"type"},{"location":"#CamiFITS.cast_FORTRAN_format-Tuple{String}","page":"Home","title":"CamiFITS.cast_FORTRAN_format","text":"cast_FORTRAN_format(format::String)\n\nDecompose the format specifier format into its fields and cast this into the FORTRAN_format object. Allowed format specifiers are of the types: Aw, Iw.m, Bw.m, Ow.m, Zw.m, Fw.d, Ew.dEe, ENw.d, ESw.d, Gw.dEe, Dw.dEe, with: w - width, m(optional) - minimum number of digits, d - number of digits to right of decimal, e - number of digits in exponent; N/S (optional) indicates engineering/scientific formating of the E type.\n\nExamples:\n\nf = cast_FORTRAN_format(\"I10\")\n  FORTRAN_format(\"Iw\", 'I', nothing, 10, 0, 0, 0)\n\nf = cast_FORTRAN_format(\"I10.12\")\n  FORTRAN_format(\"Iw.m\", 'I', nothing, 10, 12, 0, 0)\n\nf = cast_FORTRAN_format(\"E10.5E3\")\n  FORTRAN_format(\"Ew.dEe\", 'E', nothing, 10, 0, 5, 3)\n\nf.Type, f.TypeChar, f.EngSci, f.width, f.nmin, f.ndec, f.nexp\n  (\"Ew.dEe\", 'E', nothing, 10, 0, 5, 3)\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.cast_FORTRAN_datatype-Tuple{String}","page":"Home","title":"CamiFITS.cast_FORTRAN_datatype","text":"cast_FORTRAN_datatype(format::String)\n\nDecompose the format specifier format into its fields and cast this into the FORTRAN_format object. Allowed format specifiers are of the types: Aw, Iw, Fw.d, Ew.d, Dw.d, where: w - width, d - number of digits to right of decimal point.\n\nExamples:\n\nf = cast_FORTRAN_datatype(\"I10\")\n  FORTRAN_format(\"Iw\", 'I', nothing, 10, 0, 0, 0)\n\nf = cast_FORTRAN_datatypet(\"F10.4\")\n  FORTRAN_format(\"Fw.d\", 'F', nothing, 10, 0, 4, 0)\n\nf = cast_FORTRAN_datatype(\"E10.5\")\n  FORTRAN_format(\"Ew.d\", 'E', nothing, 10, 0, 5, 0)\n\nf.Type, f.TypeChar, f.EngSci, f.width, f.nmin, f.ndec, f.nexp\n  (\"Ew.d\", 'E', nothing, 10, 0, 5, 0)\n\n\n\n\n\n","category":"method"},{"location":"#Plotting","page":"Home","title":"Plotting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"step125(x::Real)\nselect125(x)\nsteps(x::Vector{T} where T<:Real)\nstepcenters(x::Vector{T} where T<:Real)\nstepedges(x::Vector{T} where T<:Real)\nedges(px, Δx=1.0, x0=0.0)","category":"page"},{"location":"#CamiFITS.step125-Tuple{Real}","page":"Home","title":"CamiFITS.step125","text":"step125(x)\n\nStep used for deviding the number x in steps according to 1-2-5 scheme\n\nExamples:\n\nstep125.([5,10,21.3,50,100.1])\n5-element Vector{Int64}:\n  1\n  2\n  5\n 10\n 20\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.select125-Tuple{Any}","page":"Home","title":"CamiFITS.select125","text":"select125(x)\n\nSelect elements of the collection x by index according to 1-2-5 scheme\n\nExamples:\n\nx = [1,2,4,6,8,10,13,16,18,20,40,60,80,100]\nselect125(x)\n [2, 6, 10, 16, 20, 60, 100]\n\nx = string.(x)\nselect125(x)\n [\"2\", \"6\", \"10\", \"16\", \"20\", \"60\", \"100\"]\n\nx = 1:100\nselect125(x)\n [20, 40, 60, 80, 100]\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.steps-Tuple{Vector{T} where T<:Real}","page":"Home","title":"CamiFITS.steps","text":"steps(x)\n\nHeatmap range transformation for steplength specification vector x\n\nExamples:\n\nx = [4,2,6]\nsteps(x)\n [0, 4, 6, 12]\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.stepcenters-Tuple{Vector{T} where T<:Real}","page":"Home","title":"CamiFITS.stepcenters","text":"stepcenters(x)\n\nStepcenter positions for steplength specification vector x\n\nExamples:\n\nx = [4,2,6]\nstepcenters(x)\n [2.0, 5.0, 9.0]\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.stepedges-Tuple{Vector{T} where T<:Real}","page":"Home","title":"CamiFITS.stepedges","text":"stepedges(x)\n\nStepedges for steplength specification vector x\n\nExamples:\n\nx = [4,2,6]\nstepedges(x)\n [0, 4, 6, 12]\n\n\n\n\n\n","category":"method"},{"location":"#CamiFITS.edges","page":"Home","title":"CamiFITS.edges","text":"edges(px [, Δx[, x0]])\n\nHeatmap range transformation from pixel coordinates to physical coordinates, with pixelsize Δx and offset x0, both in physical units.\n\nExamples:\n\npx = 1:5\nΔx = 2.5\nx0 = 2.5\nedges(px)\n [0.5, 1.5, 2.5, 3.5, 4.5]\n\nedges(px, Δx)\n [1.25, 3.75, 6.25, 8.75, 11.25]\n\nedges(px, Δx, x0)\n [-1.25, 1.25, 3.75, 6.25, 8.75]\n\n\n\n\n\n","category":"function"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
